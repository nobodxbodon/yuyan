

寻标准库之书。
观标准库之书。

寻观顺序标识符之顺序标识符之书。

寻观具体语法树之书。

内建常量立元类型也。
    内建类型字符串立内建常量也。
    内建类型整数立内建常量也。
    内建类型小数立内建常量也。
    内建类型动态分类值立内建常量也。
    内建类型有立内建常量也。
    内建类型爻立内建常量也。
    内建类型元类型立内建常量也。
    内建类型新的外部类型立内建常量也。
    内建爻阳立内建常量也。
    内建爻阴立内建常量也。
    内建有元立内建常量也。
    内建函数抛出异常立内建常量也。
    内建函数尝试运行立内建常量也。
    内建函数整数相等立内建常量也。
    内建函数整数大于立内建常量也。
    内建函数整数减立内建常量也。
    内建函数以当前续延调用立内建常量也。
    内建函数新建动态分类立内建常量也。




内建常量表示乃化内建常量而字符串也。
内建常量表示者会量而鉴量而
    有「内建类型字符串」      则『《《内建类型：字符串》》』
    或有「内建类型整数」        则『《《内建类型：整数》》』
    或有「内建类型小数」       则『《《内建类型：小数》》』
    或有「内建类型动态分类值」     则『《《内建类型：动态分类值》》』
    或有「内建类型有」         则『《《内建类型：有》》』
    或有「内建类型爻」         则『《《内建类型：爻》》』
    或有「内建类型元类型」       则『《《内建类型：元类型》》』
    或有「内建类型新的外部类型」       则『《《内建类型：新的外部类型》》』
    或有「内建爻阳」          则『《《内建爻：阳》》』
    或有「内建爻阴」          则『《《内建爻：阴》》』
    或有「内建有元」          则『《《内建有：元》》』
    或有「内建函数抛出异常」    则『《《内建函数：抛出异常》》』
    或有「内建函数尝试运行」    则『《《内建函数：尝试运行》》』
    或有「内建函数整数相等」    则『《《内建函数：整数：相等》》』
    或有「内建函数整数大于」    则『《《内建函数：整数：大于》》』
    或有「内建函数整数减」    则『《《内建函数：整数：减》》』
    或有「内建函数以当前续延调用」    则『《《内建函数：以当前续延调用》》』
    或有「内建函数新建动态分类」    则『《《内建函数：新建动态分类》》』
    也。

所有内建常量者
【
    「内建类型字符串」    ，
    「内建类型整数」     ，
    「内建类型小数」     ，
    「内建类型动态分类值」  ，
    「内建类型有」      】
接【
    「内建类型爻」      ，
    「内建类型元类型」    ，
    「内建爻阳」       ，
    「内建爻阴」       ，
    「内建有元」       】接【
「内建函数抛出异常」，
「内建函数尝试运行」，  
「内建函数整数相等」   ，
「内建函数整数大于」       】接【
「内建函数整数减」    ，
「内建函数以当前续延调用」，
「内建函数新建动态分类」 ，
「内建类型新的外部类型」
】也。

「： 内建常量表示乃化内建常量而字符串也。
内建常量表示者会量而
    鉴量而
        有「内建类型元类型」则『Set』
        或有「其他」则（发生事故于『未有133』）也。 ：」


抽象语法者「
    「：valence，表达一个ABT节点的参数类型：」
    语法类立元类型也。
        元类立语法类也。
        函类立化语法类而化语法类而语法类也。

    「：TODO： Use this depdenet types：」
    「： 节点名称立化语法类列而元类型也。
        拉姆达抽象立节点名称于（【函类于（元类）于（元类）】）也。
        内建节点立化内建常量而节点名称于（【】）也。
        空缺立节点名称于（【】）也。
        派抽象立节点名称于（【元类，函类于（元类）于元类】）也。 ：」

    参数形式立元类型也。
        隐式立参数形式也。
        显式立参数形式也。
        结构式立参数形式也。「：内部使用，用于编译导入：」


    节点名称立元类型也。
    声明立元类型也。
    表达式立元类型也。

        「：节点名称：」
        拉姆达抽象立化参数形式而节点名称也。「：一个参数：」
        拉姆达抽象带类型立化参数形式而节点名称也。「：两个参数，第一个为定义域类型：」
        内建节点立化内建常量而节点名称也。
        空缺立节点名称也。
        派抽象立化参数形式而节点名称也。「：两个参数，第一个是domain，第二个是有抽象的range：」
        纯名派抽象立化参数形式而节点名称也。「：一个参数，无domain，第二个是有抽象的range，目前只有隐式：」
        函数调用立化参数形式而节点名称也。
        字符串节点立化字符串而节点名称也。
        模式匹配分支立节点名称也。「：case caluse：」
        模式匹配立节点名称也。「：case， 第一个参数是被匹配对象，之后每个参数是一个分支：」
        结构投影立化字符串而节点名称也。
        爻分支节点立节点名称也。
        外部调用节点立节点名称也。
        「： 结构单例类型节点立节点名称也。 ：」
        项单例类型节点立节点名称也。「：有两个参数，第一个是类型，第二个式值 S_1(2)，：」
        项单例无类型类型节点立节点名称也。 「： 如果类型没有推断，则仅有一个参数：」 
        结构节点立化或可有字符串「：可能得标签：」而节点名称也。「：两个参数，第一个参数是当前项，第二个参数是带有binding的后续项：」
        空结构节点立节点名称也。「：结构节点的Unit（单位元？）：」
        其他声明节点立化声明而节点名称也。「：不存在命名的声明节点，比如操作符优先级及文件操作，以及未经类型检查或者阐述的定义声明：」
        内联虑立节点名称也。
        结构虑立节点名称也。
        顺序执行节点立节点名称也。
        类型判断节点立节点名称也。
        对子构造节点立节点名称也。
        对子类型节点立节点名称也。
        对子解构节点立节点名称也。
        文件引用节点立化字符串而节点名称也。「：字符串为模块文件的绝对路径：」

        「：声明：」
        文件操作立化结构名称操作而化字符串列而声明也。
        构造声明立化字符串而化表达式而声明也。 
        类型声明立化字符串而化表达式而声明也。
        定义声明立化表达式而化表达式而声明也。
        直接表达式立化表达式而声明也。
        操作符声明立化字符串而化「操作符结合性」而声明也。

        「：表达式：」
        「： 结构表达式立化声明列而表达式也。 ：」
        式节点立化节点名称而化表达式列而表达式也。
        绑定立化（或可有字符串）「：可能的字符串：」而化表达式而表达式也。「：使用deBruijn：」
        绑定变量立化整数而表达式也。
        自由变量立化字符串而表达式也。

    内建乃化内建常量而表达式也。
    内建者会甲而（式节点于（内建节点于甲）于【】）也。
        
    抽象替换自由变量乃化字符串而化整数而化表达式而表达式也。
    抽象替换自由变量者循抽象替换自由变量以会绑名而会当前序数而会式而
        鉴式而 
            有自由变量于名则
                （若「串相等」于名于绑名
                则绑定变量于当前序数
                否则式
                ）
            或有绑定变量于序数则绑定变量于序数
            或有绑定于名于下式则绑定于名于（抽象替换自由变量于绑名于（当前序数加一）于下式）
            或有式节点于名称于「式列」则式节点于名称于（态射于（抽象替换自由变量于绑名于当前序数）于「式列」）
            「： 或有结构表达式于「声明列」则发生事故于『未有150』 ：」
            或有其他则发生事故于『未有152』
    也。
    
    「：构造抽象 进行抽象于X于X X = λX.X X：」
    进行抽象乃化字符串而化表达式而表达式也。
    进行抽象者会绑名而会式而
        绑定于（可有绑名）于（抽象替换自由变量于绑名于一于式）
        也。

    进行无名抽象乃化表达式而表达式也。
    进行无名抽象者会式而
        绑定于（可无）于（式）
        也。

    解构替换绑定变量乃化整数而化表达式而化表达式而表达式也。
    解构替换绑定变量者循解构替换绑定变量以会当前序数而会替换式而会式而
        鉴式而 
            有自由变量于名则自由变量于名
            或有绑定变量于序数则
                （若当前序数等于序数
                则替换式
                否则绑定变量于序数）
            或有绑定于名于下式则绑定于名于（解构替换绑定变量于（当前序数加一）于替换式于下式）
            或有式节点于名称于「式列」则式节点于名称于（态射于（解构替换绑定变量于当前序数于替换式）于「式列」）
            「： 或有结构表达式于「声明列」则发生事故于『未有150』 ：」
            或有其他则发生事故于『未有152』
    也。

    「：解构抽象 结构抽象于λX.X X = (X, X X)：」
    解构抽象乃化表达式而（字符串合表达式）也。
    解构抽象者会式而鉴式而
        有绑定于（可有名）于下式则
            名与（解构替换绑定变量于一于（自由变量于名）于下式）
        或有绑定于（可无）于下式则
            （虑「名者下个字符序数于『绑』也。
            」以成
            名与（解构替换绑定变量于一于（自由变量于名）于下式）之道）
        或有「其他」则发生事故于『不可解构非绑定式』
        也。

    替换抽象名称乃化字符串而化表达式而（表达式）也。
    替换抽象名称者会新名而会式而鉴式而
        有绑定于（名）于下式则
            绑定于（可有新名）于下式
        或有「其他」则发生事故于『不可替换抽象于非绑定式』
        也。

    「：减少所有的绑定变量一格：」
    绑定变量少一乃化表达式而表达式也。
    绑定变量少一者循绑定变量少一以会式而
        鉴式而 
            有自由变量于名则自由变量于名
            或有绑定变量于序数则
                （若序数小于二
                则发生事故于『无法减少绑定变量』
                否则绑定变量于（序数减一））
            或有绑定于名于下式则绑定于名于（绑定变量少一于下式）
            或有式节点于名称于「式列」则式节点于名称于（态射于（绑定变量少一）于「式列」）
            「： 或有结构表达式于「声明列」则发生事故于『未有150』 ：」
            或有其他则发生事故于『未有152』
    也。
    
    
    解构无绑定抽象乃化表达式而表达式也。
    解构无绑定抽象者会式而鉴式而
        有绑定于（名）于下式则
            （绑定变量少一于下式）
        或有「其他」则发生事故于『不可解构非绑定式』
        也。
   
            
」也。



抽象语法表示者「
    观抽象语法之书。

     「：mutual recursion hack：」
    声明表示引用乃引用类于（化声明而字符串）也。
    声明表示引用者新引用于（（化声明而字符串）也会甲而发生事故于『未赋值』）也。

    参式表示乃化参数形式而字符串也。
    参式表示者会参式而（鉴参式而有显式则『』或有隐式则『ₑ』或有结构式则『ˢ』）也。
    节点名称表示乃化（节点名称）而字符串也。
    节点名称表示者会名而鉴名而
        有拉姆达抽象于参式则『λ』附（参式表示于参式）
        或有拉姆达抽象带类型于参式则『λᵀ』附（参式表示于参式）
        或有（内建节点于常量）则（内建常量表示于常量）
        或有空缺则『「」』
        或有派抽象于参式则『Π』附（参式表示于参式）
        或有纯名派抽象于参式则『Πₙ』附（参式表示于参式）
        或有函数调用于参式则『ap』
        或有字符串节点于串则『『』附串附『「：』：」』
        或有模式匹配分支则『|→』
        或有模式匹配则『case』
        或有结构投影于串则『↘』附串附『↙』
        或有「爻分支节点」则『如果』
        或有「外部调用节点」则『外部调用』
        「： 或有「结构单例类型节点」则『结构单例』 ：」
        或有「项单例类型节点」则『项单例』
        或有「项单例无类型类型节点」则『项单例无类型』
        或有「结构节点」于标签名则『Σ(↪』附（鉴标签名而有（可有真名）则真名或有「可无」则『_』）附『)』
        或有「空结构节点」则『Σ0』
        或有「其他声明节点」于明则（（读引用于声明表示引用）于明）
        或有「内联虑」则『虑』
        或有「结构虑」则『虑₍₎』
        或有「顺序执行节点」则『；』
        或有「类型判断节点」则『类型判断』
        或有「对子构造节点」则『⟨,⟩』
        或有「对子类型节点」则『合』
        或有「对子解构节点」则『中』
        或有「文件引用节点」于串则『文件引用『』附串附『「：』：」』
        或有「其他」则发生事故于『未有246』
        也。

   

    表达式表示乃（化表达式而字符串）也。
    表达式表示者循递归以会式而鉴式而
            「： 有结构表达式于明则『「』附（以『。』合并（态射于（读引用于声明表示引用）于明））附『」』 ：」
            「： 或 ：」
            有自由变量于串则（串）
            或有式节点于名于「式列」则
             「： 『式节点』 ：」
            （节点名称表示于名）附『[』附（以『；』合并（态射于（递归）于「式列」））附『]』
            「： （节点名称表示于名） ：」
            「： （以『；』合并（态射于（递归）于「式列」）） ：」
            或有绑定于名于体则（鉴名而有（可有串）则串或有「可无」则『_』或有「其他」则发生事故于『np』）附『.』附（递归于体）
            或有绑定变量于数则（数据结构之整数操作之表示于数）
            或有「其他」则发生事故于『未有238』也。
    声明表示乃（化声明而字符串）也。
    声明表示者
        （会声明而鉴声明而
        有文件操作于作于名则（结构名称操作表示于作）附（以『之』合并名）
        或有构造声明于名于类则（名）附『立』附（表达式表示于类）附『也』
        或有类型声明于名于类则（名）附『乃』附（表达式表示于类）附『也』
        或有定义声明于名于式则（表达式表示于名）附『者』附（表达式表示于式）附『也』
        或有「直接表达式」于式则
                                「： 『直接表达式』 ：」
                                （表达式表示于式）
        或有操作符声明于名于结则『术』附（名）附『交』附（「操作符结合性表示」于结）附『也』
        或有「其他」则发生事故于『未有234』）
        也。
    
    有也写引用于声明表示引用于声明表示。

    表示列乃化声明列而字符串也。
    表示列者会列而以『。』合并（态射于（声明表示）于「列」）也。

        
」也。


观抽象语法之书。
观抽象语法表示之书。
「：式替换 X (\Y Z) = [X/Y] Z：」
式替换乃化表达式而化表达式而表达式也。
式替换者会替换式而会被替换式而
    「： 虑不要者打印行于（『试图用』附（表达式表示于替换式）附『对』附（表达式表示于被替换式）附『进行替换』）而 ：」
    鉴被替换式而
        有绑定于（名）于下式则
            （解构替换绑定变量于一于替换式于下式）
        或有「其他」则发生事故于（『不可替换非绑定式：』附
        『「：换行：」试图用』附（表达式表示于替换式）附『对』附（表达式表示于被替换式）附『进行替换』）
    也。


结构名称转表达式乃化字符串列而表达式也。
结构名称转表达式者循结构名称转表达式以会名称而
    鉴名称而
        有【】则发生事故于『不可为空』
        或有单衔【】则自由变量于单
        或有「其他」则式节点于
            （结构投影于（第N个于（（长度于名称）减一）于名称））于
            【结构名称转表达式于（取于（（长度于名称）减一）于名称）】也。

「： 构造结构表达式乃化声明列而表达式也。
构造结构表达式者循构造结构表达式以会声明们而
    鉴声明们而
        有【】则式节点于「空结构节点」于【】
        或有当前声明衔尾则
            （虑尾式者（构造结构表达式于尾）而
                （
                    鉴当前声明而
                        有文件操作于作于名则式节点于（结构节点于（可无））于【式节点于（其他声明节点于当前声明）于【】，进行无名抽象于尾式】
                        或有构造声明于名于类则式节点于（结构节点于（可有名））于【类，进行抽象于名于尾式】
                        或有类型声明于名于类则式节点于（结构节点于（可有名））于【类，进行抽象于名于尾式】
                        或有定义声明于名于式则式节点于（结构节点于（可无））于【式节点于（其他声明节点于当前声明）于【】，进行无名抽象于尾式】「：有问题：关于重命名问题：」
                        或有「直接表达式」于式则式节点于（结构节点于（可无））于【式节点于（其他声明节点于当前声明）于【】，进行无名抽象于尾式】
                        或有操作符声明于名于结则式节点于（结构节点于（可无））于【式节点于（其他声明节点于当前声明）于【】，进行无名抽象于尾式】
                        或有「其他」则发生事故于『未有234』
                ））
        也。 ：」

结构末尾添加直接表达式乃化表达式而化表达式而表达式也。
结构末尾添加直接表达式者循结构末尾添加直接表达式以会结而会直而
    鉴结而
        有（式节点于「空结构节点」于【】）则式节点于（结构节点于（可无））于【式节点于（其他声明节点于（「直接表达式」于直））于【】，（式节点于「空结构节点」于【】）】
            「：TODO：抽象问题！！！， 不可以直接探查绑定，因为直式中可能有被抽象的变量，（本函数式虑结构的辅助函数）：」
        或有（式节点于（结构节点于节名）于参一衔（绑定于绑名于（式二））衔【】）则
            式节点于（结构节点于节名）于【参一，绑定于绑名于（「结构末尾添加直接表达式」于式二于直）】也。
