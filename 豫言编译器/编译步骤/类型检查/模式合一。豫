
「：Implements Abel and Pientka, Higher-Order Constraint Based Pattern Unification：」

寻观标准库之书。
寻观豫言编译器之编译步骤之抽象绑定树结构之抽象语法树之书。
寻观豫言编译器之编译步骤之抽象绑定树结构之抽象语法树方法之书。
观抽象语法之书。
观抽象语法表示之书。
寻观豫言编译器之编译步骤之抽象绑定树结构之命名环境术之书。
寻观豫言编译器之编译步骤之抽象绑定树结构之抽象语法树相等方法之书。
观抽象语法相等之书。
寻观顶部归一化之书。
寻观元变量管理之书。
寻观豫言编译器之编译步骤之操作符之操作符数据结构之书。

合一约束立元类型也。
    对象合一约束立化命名环境而化表达式「：左项：」而化表达式「：右项：」而化表达式「：类型：」而「合一约束」也。
    类型合一约束立化命名环境而化表达式「：左项：」而化表达式「：右项：」而「合一约束」也。

当前待合一合集乃引用类于（「合一约束」）列也。
当前待合一合集者新引用于【】也。

当前延迟合集乃引用类于（「合一约束」）列也。
当前延迟合集者新引用于【】也。

添加新问题乃化「合一约束」而有也。
添加新问题者会问题而
    写引用于「当前待合一合集」于（问题衔（读引用于「当前待合一合集」））也。

约束顶部归一化乃化「合一约束」而「合一约束」也。
约束顶部归一化者会约束而
    鉴约束而
        有「对象合一约束」于境于左式于右式于式类型则
          （「对象合一约束」于境于（进行对象顶部归一化于境于左式）于（进行对象顶部归一化于境于右式）于式类型）
        或有「类型合一约束」于境于左式于右式则
          （「类型合一约束」于境于（进行类型顶部归一化于境于左式）于（进行类型顶部归一化于境于右式））
        也。
约束表示乃化「合一约束」而字符串也。
约束表示者会约束而
    鉴约束而
        有「对象合一约束」于境于左式于右式于式类型则
                （表达式表示于左式）附『 = 』附（表达式表示于右式）附『 <= 』附（表达式表示于式类型）
        或有「类型合一约束」于境于左式于右式则
                （表达式表示于左式）附『 = 』附（表达式表示于右式）附『 (as sig) 』
        也。

「：如果要延迟剪枝（不是失败），则抛出此异常：」
「： 剪枝延迟异常者新建异常于有于『剪枝延迟异常』也。 ：」
延迟异常串者『剪枝延迟异常』也。「：TODO：使用正常的EXCEPTION，当前EXCEPTION有bug：」

进行剪枝元变量参乃化字符串列「：左式元变量的参数：」而
        化表达式列「：右式原变量参数：」而
        化命名环境「：右变量环境：」
        而命名环境「：检查后的式子，可解析传入的原变量：」也。
进行剪枝元变量参者会左参而会右参而会右境而
    「： 虑无者打印行于『进行剪枝元变量参』而 ：」
    若（长度于右参）不等于（长度于右境）则发生事故于『参境必须相等』
    否则（「：命名环境式反着的：」
        从右折叠于（会右式及当前条目而会后境而
            鉴（（表达式合条目）也右式及当前条目）而有
                （右式与（本地条目于名于类））则
                    （若（非于（是子集于「串相等」于（读取式自由硬性变量于右式）于左参））
                    则后境
                    否则（
                            若（（是子集于「串相等」于（读取式自由变量于右式）于左参））
                            则（若（是子集于「串相等」于（读取式自由变量于类）于（命名环境获取所有名称于后境））
                                则（（本地条目于名于类）衔后境）
                                否则（发生事故于『无法进行剪枝』）
                            ）
                            否则（
                                「： 剪枝延迟异常之抛出于元 ：」
                                发生事故于（延迟异常串）
                                ）「：delay subst if flexible arguments to unif variable are not present on the left hand side：」
                    ））
        ）于【】于（「拉链合并」于右参于右境）
    ）也。





进行剪枝和替换乃化整数「：左式元变量编号：」而化字符串列「：元变量的参数，（其实并不是，而是允许rigid occurrence的所有变量（考虑存在绑定））：」而
    化命名环境「：左变量的定义环境：」而
    化表达式「：待检查的式子：」而表达式「：检查后的式子，可解析传入的原变量：」也。
进行剪枝和替换者循进行剪枝和替换以会左号而会左参而会左境而会右式而
    「： 虑无者打印行于『正进行剪枝替换：于右式：』附（表达式表示于右式）而 ：」
    虑递归者（进行剪枝和替换于左号于左参于左境）而
    「： 虑左境者（读取元变量环境于左号）而 ：」
    虑剪枝替换式及绑定式者遇表达式者定义域而遇表达式者值域而
        （虑绑定名及真值域者解构抽象不重复名称于值域于（左参接（命名环境获取所有名称于左境））而
                  虑绑定名者绑定名及真值域中零而
                  虑后定义域者递归于定义域而
                  虑后值域者「进行剪枝和替换」于左号于（绑定名衔左参）于（本地条目于绑定名于后定义域）衔左境于（绑定名及真值域中一）而
                   （后定义域）衔（进行抽象于绑定名于后值域）衔【】）
        而
    鉴右式而
        有（自由变量于右名）则（
                鉴（滤态射二于（会左名而会左条目而
                            若「串相等」于左名于右名
                            则（可有左条目）
                            否则（可无））于左参于左境）而
                有【】则（发生事故于『剪枝失败，右式变量rigidly occurs：』附右名）
                或有（（本地条目于匹配名于本类））衔【】则（自由变量于匹配名）
                或有其他则（发生事故于『无法进行反替换，左参中右多个可能的值』）
        ）
        或有（式节点于（元变量于（右号））于右参）则
            若（左号等于右号）则发生事故于『错误！合一发生检查（Occurs Check Failure）』
            否则
                （鉴归一元变量式于右式而
                    有（可有（新式））则（递归于新式）
                    或有（可无）则
                        （鉴读取元变量于右号而
                            有对象变量数据于（（右原境与右类）与（可无））则
                            （
                                虑右新境者进行剪枝元变量参于左参于右参于右原境而
                                （若（长度于右新境）等于（长度于右原境）
                                则（式节点于（元变量于（右号））于（态射于递归于右参））「：仍然爻：」
                                否则（
                                    若（是子集于「串相等」于（读取式自由变量于右类）于（命名环境获取所有名称于右新境））
                                    则（
                                        虑新元变量式者新建对象元变量式于右新境于右类而
                                        虑无者解析元变量于右号于新元变量式而「：右新境式右原境的subset，所以没有问题：」
                                        递归于新元变量式
                                    ）
                                    否则（发生事故于『元变量剪枝出现问题！』）
                                ））
                            ）
                            或有类型变量数据于（（右原境）与（可无））则
                            （「：警告：从上面拷贝的，TODO不要拷贝！：」
                                虑右新境者进行剪枝元变量参于左参于右参于右原境而
                                （若（长度于右新境）等于（长度于右原境）
                                则（式节点于（元变量于（右号））于（态射于递归于右参））「：仍然爻：」
                                否则（
                                        虑新元变量式者新建类型元变量式于右新境而
                                        虑无者解析元变量于右号于新元变量式而「：右新境式右原境的subset，所以没有问题：」
                                        递归于新元变量式
                                    ）
                                ）
                            ）
                            或有其他则发生事故于『应当没有解析』
                        ）
                ）
        或有（式节点于（内建节点于（量甲））于【】）则右式
        或有（式节点于（静态单例类型节点）于类衔式衔【】）则
                （式节点于（静态单例类型节点）于（递归于类）衔（递归于式）衔【】） 
        或有（式节点于（签名值节点）于式衔【】）则
                （式节点于（签名值节点）于（递归于式）衔【】） 
        或有（式节点于（元类型类型占位节点）于【】）则
                （式节点于（元类型类型占位节点）于【】）
        或有（式节点于（类型签名节点）于式衔【】）则
                （式节点于（类型签名节点）于（递归于式）衔【】） 
        或有（式节点于（派抽象于派形）于定义域衔值域衔【】）则
                （式节点于（派抽象于派形）于（剪枝替换式及绑定式于定义域于值域））
        或有（式节点于（结构节点于可能名）于定义域衔值域衔【】）则
                （式节点于（结构节点于可能名）于（剪枝替换式及绑定式于定义域于值域））
        或有（式节点于（空结构节点）于【】）则
                （式节点于（空结构节点）于（【】））
        或有（式节点于（函数调用于函形）于函数衔参数衔【】）则
                （式节点于（函数调用于函形）于（递归于函数）衔（递归于参数）衔（【】））
        或有「其他」则发生事故于『剪枝替换未有：』附（表达式表示于右式）
        也。

处理左元变量方程乃化表达式而化表达式而有也。
处理左元变量方程者会左式而会右式而
    鉴（左式与右式）而
        有（式节点于（元变量于量甲）于参甲）与右式二则
            （鉴右式而
                有（式节点于（元变量于量乙）于参乙）则
                    （若量甲等于量乙
                        则发生事故于『未有34』
                        否则（
                            若（「全部符合」于「是自由变量」于参乙）
                            则解析元变量于量甲于（进行剪枝和替换于量甲于（态射于读取自由变量于参甲）于（读取元变量环境于量甲）于右式）
                            否则（若（「全部符合」于是自由变量于参甲）
                                则解析元变量于量乙于（进行剪枝和替换于量乙于（态射于读取自由变量于参乙）于（读取元变量环境于量乙）于左式）
                                「： 否则剪枝延迟异常之抛出于元 ：」
                                否则（发生事故于延迟异常串）
                            ）
                        ）
                    ）
                或有「其他」则（解析元变量于量甲于（进行剪枝和替换于量甲于（态射于读取自由变量于参甲）于（读取元变量环境于量甲）于右式））
            ）也。


结构比较乃化「命名环境」而化表达式而化表达式而化（化命名环境而化表达式而化表达式而「合一约束」）而有也。
结构比较者会境而会左式而会右式而会构造约束而
    鉴左式与右式而
        有（自由变量于串甲）与（自由变量于串乙）则
            若（「串相等」于串甲于串乙）
                则（元）
                否则（发生事故于『无法合一！』）
        或有（式节点于（内建节点于（量甲））于【】）与（式节点于（内建节点于（量乙））于【】）则
            若（「内建常量相等」于量甲于量乙）
                则（元）
                否则（发生事故于『无法合一！』）
        或有其他则（发生事故于『（模式合一对象）合一失败！不相等！：』附（（约束表示于（构造约束于境于左式于右式））））
        也。
        
 
「：给定 X, x.Y, Z, z.W 判断 [X, x.Y] = [Z, z.W]：」
式及绑定式合一乃化命名环境而化表达式而化表达式而化表达式而化表达式而有也。
式及绑定式合一者会境而会左定义域而会左值域而会右定义域而会右值域而
    （「添加新问题」于（「类型合一约束」于境于左定义域于右定义域）；
                        （虑绑定名者（获取可能绑定名于左值域）而
                        虑新绑定名及新境者（「添加声明」于境于绑定名于（内建元类型式）「：TODO：为什么式元类型式？：」）而
                        虑新绑定名者新绑定名及新境中零而
                        虑新境者新绑定名及新境中一而
                        「添加新问题」于（「类型合一约束」于（新境）
                            于（式替换于（自由变量于新绑定名）于左值域）
                            于（式替换于（自由变量于新绑定名）于右值域）
                            ）
                        ）
                    ）也。

单一方程处理乃化「合一约束」而有也。
单一方程处理者会约束而
    「： 虑无者打印行于『正在合一约束：』附（约束表示于约束）而 ：」
    鉴约束而
        有「对象合一约束」于境于左式于右式于式类型则
        （鉴式类型而有
            式节点于（内建节点于（内建类型元类型））于【】则
            「添加新问题」于（「类型合一约束」于境于左式于右式）「：还没想明白类型和对象是否要一视同仁：」
            或有「其他类型」则
                （鉴（左式与右式）而
                        有（式节点于（元变量于量甲）于参甲）与右式二则
                            处理左元变量方程于左式于右式
                        或有「其他左式」与（式节点于（元变量于量甲）于参甲）则
                            「添加新问题」于（「对象合一约束」于境于右式于左式于式类型）「：反转：」
                        「：结构比较：」
                        或有其他则结构比较于境于左式于右式于（会境而会左而会右而（「对象合一约束」于境于左于右于式类型））
                ）
        ）
        或有「类型合一约束」于境于左式于右式则
            （鉴（左式与右式）而
                有（式节点于（元变量于量甲）于参甲）与右式二则
                    处理左元变量方程于左式于右式
                或有「其他左式」与（式节点于（元变量于量甲）于参甲）则
                        「添加新问题」于（「类型合一约束」于境于右式于左式）「：反转：」
                或有（式节点于（派抽象于左形）于左定义域衔左值域衔【】）与
                    （式节点于（派抽象于右形）于右定义域衔右值域衔【】）则
                        （若（「参式相等」于左形于右形）
                            则（「式及绑定式合一」于境于左定义域于左值域于右定义域于右值域）
                            否则 发生事故于『左右参式不相等』
                        ）
                或有（式节点于（结构节点于左名）于左定义域衔左值域衔【】）与
                    （式节点于（结构节点于右名）于右定义域衔右值域衔【】）则
                        （若（「可选值相等」于「串相等」于左名于右名）
                        则（「式及绑定式合一」于境于左定义域于左值域于右定义域于右值域）
                        否则 发生事故于『左右名不相等』
                        ）
                或有（式节点于（空结构节点）于【】）与
                    （式节点于（空结构节点）于【】）则
                        元
                或有其他则结构比较于境于左式于右式于（会境而会左而会右而（「类型合一约束」于境于左于右））
        ）
        也。



进行合集处理乃化有而有也。
进行合集处理者循进行合集处理以会元而
    鉴（读引用于「当前待合一合集」）而
        有【】则（
            鉴（读引用于「当前延迟合集」）而
                有【】则元
                或有（延迟方程们）则
                    （若（读引用于元变量有解析引用）
                    则「：有更新，重置！：」
                    （写引用于「当前待合一合集」于「延迟方程们」；
                    写引用于元变量有解析引用于阴；
                    写引用于「当前延迟合集」于【】；
                    「进行合集处理」于元）
                    否则发生事故于『未能解析所有约束！「：换行：」』
                        附（以『；「：换行：」』合并（态射于（约束表示）于（延迟方程们））））
        ）
        或有（当前约束衔「后合集」）则
            尝试运行于（会元而

                    （写引用于「当前待合一合集」于「后合集」；
                                    单一方程处理于（约束顶部归一化于当前约束）
                        「： （剪枝延迟异常之尝试于
                                （会无而 ：」
                                「： ）「：TODO: 使用这种形式的EXCEPTION，但目前异常处理有Bug：」
                                于（会无而
                                    虑无者打印行于『约束延迟解决：』附（约束表示于当前约束）而
                                    写引用于（「当前延迟合集」）于（当前约束衔（读引用于「当前延迟合集」））
                                ）） ：」
                            ；「进行合集处理」于元）
                ）于（会事故而
                        若（「串相等」于事故于（延迟异常串））「：TODO 使用正常的Exceptions：」
                        则（ 虑无者打印行于『约束延迟解决：』附（约束表示于当前约束）而
                            写引用于（「当前延迟合集」）于（当前约束衔（读引用于「当前延迟合集」）））
                        否则（发生事故于事故附『「：换行：」在试图进行合一时：』附（约束表示于当前约束）附『。即：』附（约束表示于（约束顶部归一化于当前约束）））
                ）
        也。


添加问题并进行合一乃化命名环境而化表达式而化表达式而化表达式而有也。
添加问题并进行合一者会境而会左式而会右式而会式类型而
    （「添加新问题」于（「对象合一约束」于境于左式于右式于式类型）；「进行合集处理」于元）也。

断言类型相等乃化命名环境而化表达式而化表达式而有也。
断言类型相等者会境而会左式而会右式而
    （「添加新问题」于（「类型合一约束」于境于左式于右式）；「进行合集处理」于元）也。