「：This is untyped closure conversion. 
I have prepared groundwork for typed closure conversion, but I 
have not yet studied it.
：」



寻观标准库之书。
寻观豫言编译器之编译数据之抽象绑定树结构之抽象语法树之书。
寻观豫言编译器之编译数据之抽象绑定树结构之抽象语法树方法之书。
寻观豫言编译器之编译数据之抽象绑定树结构之抽象语法树相等方法之书。
寻观豫言编译器之编译数据之抽象绑定树结构之模块操作之书。
寻观豫言编译器之编译数据之编译配置之编译期输出之书。

寻观豫言编译器之编译数据之抽象绑定树结构之命名环境术之书。

观抽象语法之书。
观抽象语法表示之书。
观抽象语法相等之书。

寻观豫言编译器之编译数据之操作符之操作符数据结构之书。
寻观豫言编译器之编译步骤之语法分析之函数合集之书。
寻观豫言编译器之编译步骤之类型检查之元变量管理之书。
寻观豫言编译器之编译步骤之类型检查之顶部归一化之书。
寻观拓展库之顺序标识符之顺序标识符之书。

寻观豫言编译器之编译数据之编译配置之编译期输出之书。
寻观豫言编译器之编译数据之文件管理之编译文件信息之书。
寻观豫言编译器之编译数据之抽象绑定树结构之静态单例类型处理之书。

默认指针类型者『i64*』也。

创建固定长度的数组乃化（化字符串而有）而化整数而字符串也。
创建固定长度的数组者会写出而会长度而
    虑
    「返回名者下个字符序数于『创建长度为』附（整数表示于长度）附『的数组』也。
    数组名者下个字符序数于『数组』也。
    写出于
    『def 』附默认指针类型附『 @』附返回名附『(』附
        （以『, 』合并（态射于（会数而（默认指针类型）附『 %元素』附（整数表示于数））于（整数范围于零于长度）））
        附『) {』附『「：换行：」』附
    『%』附（数组名）附『 = call 』附（默认指针类型）附『* @allocateArray(i64 』附（整数表示于长度）附『)』附『「：换行：」』附
        （以『「：换行：」』合并（态射于（会序数而
            『%元素指针』附（整数表示于序数）附『 = getelementptr 』附（默认指针类型）附
                『, 』附（默认指针类型）附『* %』附（数组名）附『, i64 』附（整数表示于序数）附『「：换行：」』附
            『store 』附（默认指针类型）附『 %元素』附（整数表示于序数）附『, 』附（默认指针类型）附『* %元素指针』附（整数表示于序数）
        ）于（整数范围于零于长度）））附『「：换行：」』附


    『%返回数组名 = bitcast 』附（默认指针类型）附『* %』附（数组名）附『 to 』附（默认指针类型）附『「：换行：」』附
    『ret i64* 返回数组名』附『「：换行：」』附
    『}』。
    返回名」也。

断言乃化爻而有也。
断言者会值而若值则元否则（发生事故于『断言不对』）也。

「：输入是模式匹配分支，写一个函数，参数是待匹配的模式，返回值是i1，如果匹配返回真，不匹配返回假：」
编译模式匹配分支条件乃化（化字符串而有）而化表达式而字符串也。
编译模式匹配分支条件者循编译模式匹配分支条件以会写出而会分支式而
    鉴分支式而
        有（式节点于（模式匹配分支）于模式衔结果衔【】）则
            （
                鉴模式而
                有（式节点于（模式匹配新变量于另名）于另参）则（
                    虑返回名者下个字符序数于『模式匹配条件』而
                    虑无者写出于（
                       『def i1 @』附返回名附『(i64* %参数) {「：换行：」』附
                        『ret i1 1』附
                        『}』
                       ）
                    而返回名
                ）
                或有（式节点于（「展开后唯一构造器节点」于构造器序数）于参数）则（
                    虑「
                        。

                        虑返回名者下个字符序数于『模式匹配条件』而
                        虑无者写出于（
                        『def i1 @』附返回名附『(i64* %参数) {「：换行：」』附
                            『进入:「：换行：」』附
                            『%参数数组 = bitcast i64* %参数 to i64**「：换行：」』附
                            『%构造器指针 = getelementptr i64, i64* %参数, i64 0「：换行：」』附
                            『%构造器 = load i64, i64* %构造器指针「：换行：」』附
                            『%匹配0 = icmp eq i64 %构造器, 』附（整数表示于构造器序数）附『「：换行：」』附
                            （以『「：换行：」』合并（
                                打表于（长度于参数）于（会当前元素序数而
                                    虑当数者当前元素序数加一而
                                    虑子条件函者编译模式匹配分支条件于写出于（第N个于当前元素序数于参数）而
                                        『%元素』附（整数表示于当数）附『:「：换行：」』附
                                        『%元素』附（整数表示于当数）附『指针 = getelementptr i64*, i64** %参数数组, i64 』附（整数表示于当数）附『「：换行：」』附
                                        『%元素』附（整数表示于当数）附『 = load i64*, i64** %元素』附（整数表示于当数）附『指针「：换行：」』附
                                        『%元素』附（整数表示于当数）附『匹配 = call i1 @』附子条件函附『(i64* %当前元素)「：换行：」』附
                                        『%匹配』附（整数表示于当数）附『 = and i1 %匹配』附（整数表示于当前元素序数）附『, %元素』附（整数表示于当数）附『匹配「：换行：」』
                                ）
                            ））附『「：换行：」』附
                            『ret i64* %匹配』附（整数表示于（（长度于参数）加一））附『「：换行：」』附
                            『}』
                        ）
                        而返回名
                    」
                ）
                或有「其他」则发生事故于『期待展开后节点或新变量』
            ）
        或有「其他」则发生事故于『期待模式匹配分支』
    也。


代码生成乃化（化字符串而有）「：写全局文件：」
         而化字符串列「：当前所有的自由变量：」
         而化表达式「：待变换的式子：」
         而字符串「：函数名，必须以自由变量调用：」也。
代码生成者循「代码生成」以会写出而会已有自由变量而会式而
    虑「

        递归同变量者代码生成于写出于已有自由变量也。
        递归者代码生成于写出也。

        解绑乃承甲而化表达式而化（化字符串而化表达式而甲）而甲也。
        解绑者会式而会继续而
            虑名及后式者（解构抽象于式）
            而继续于（名及后式中零）于（名及后式中一）也。

        返回名者下个字符序数于『生成函数』也。



        获取参数签名乃化字符串列而字符串也。
        获取参数签名者会变们而（『(』附（以『, 』合并（态射于（会变而默认指针类型附『 %』附变）于「变们」））附『)』）也。
        已有参数签名者获取参数签名于已有自由变量也。


        包裹函数体乃化字符串而字符串也。
        包裹函数体者会串而『define 』附（默认指针类型）附『 @』附返回名附已有参数签名附『 {「：换行：」』附（串）附『「：换行：」}』也。

        默认返回乃化字符串而字符串也。
        默认返回者会串而『ret 』附（默认指针类型）附『 』附串也。

        空写出乃化有而有也。
        空写出者会无而
            写出于（
                （包裹函数体于（
                    默认返回于『0』
                    ）
                ）
            ）也。

        详细调试打印行于（会无而『代码生成中：』附（表达式表示于式））。

        转换结果乃有也。
        转换结果者
        「： 尝试运行于 ：」
        「： 会无而 ：」
            鉴式而
                有（自由变量于名）则
                    （若「存在吗」于（「串相等」于名）于「已有自由变量」
                    则（写出于
                        （包裹函数体于（默认返回于（『%』附名））））
                    否则（发生事故于『并不存在自由变量』附名）
                    ）
                或有（式节点于「内联虑」于当前衔下个衔【】）则
                    （
                        虑当前函数者递归同变量于当前而
                        解绑于下个于（会后名而会后下个而
                        虑下个函数者递归于（已有自由变量接【后名】）于下个而
                            （写出于
                            （包裹函数体于（
                                『%』附（后名）附『 = call i64* @』附（当前函数）附（已有参数签名）附『「：换行：」』附
                                『%后续 = call 』附（默认指针类型）附『 @』附（下个函数）附（获取参数签名于（已有自由变量接【后名】））附『「：换行：」』附
                                （默认返回于（『%后续』））
                            ））
                        ）
                    ））
                或有（式节点于（正则结构结尾节点无类型）于参数）则
                    （虑参数们者态射于（会参而
                        鉴参而有（式节点于（正则结构结尾参数节点无类型于投名）于（自由变量于参名）衔【】）
                            则参名
                            或有「其他」则发生事故于『113，不正确，闭包转换不应该改变正则结构结尾参数节点』
                            ）于参数而
                      虑无者断言于（是子集于（串相等）于参数们于已有自由变量）而
                      虑数组创建函数者创建固定长度的数组于写出于（长度于参数们）而
                      （写出于（
                          包裹函数体于（
                              『%返回值 = call i64* @』附（数组创建函数）附（获取参数签名于（参数们））附『「：换行：」』附
                              （默认返回于『%返回值』）
                          ）
                      ））
                    ）
                或有（式节点于（文件引用节点于文件名）于【】）则
                    （
                        虑文件全局名者读取代码生成信息于文件名而
                        虑无者（写出于『@』附文件全局名附『 = external global i64**』）而
                        （写出于（
                            包裹函数体于（
                                『%返回值 = load i64*, i64** @』附文件全局名附『「：换行：」』附
                                （默认返回于『%返回值』）
                            ）
                        ））
                    ）
                或有（式节点于（结构投影带序数于投影名于序数）于结构衔【】）则
                    （
                        虑结构函数者递归同变量于结构而
                        （写出于（
                            包裹函数体于（
                                『%结构体 = call i64* @』附结构函数附（已有参数签名）附『「：换行：」』附
                                『%结构体指针 = bitcast i64* %结构体 to i64**「：换行：」』附
                                『%返回值指针 = getelementptr i64*, i64** %结构体指针, i64 』附（整数表示于序数）附『「：换行：」』附
                                『%返回值 = load i64*, i64** %返回值指针「：换行：」』附
                                『ret i64* %返回值』
                            ）
                        ））
                    ）
                或有（式节点于（闭包拉姆达抽象）于双绑定衔闭包衔【】）则
                    （
                        虑函数名者下个字符序数于『函数』而
                        虑无者（解绑于双绑定于（会闭包名而会单绑定而
                            解绑于单绑定于（会参数名而会函体而
                                虑函体函数名者递归于【闭包名， 参数名】于函体而
                                    写出于（「：TODO 其实不用定义这个：」
                                        『define i64* @』附（函数名）附（获取参数签名于【闭包名，参数名】）附『 {「：换行：」』附
                                        『%返回值 = call i64* @』附（函体函数名）附（获取参数签名于【闭包名，参数名】）附『「：换行：」』附
                                        『ret i64* %返回值「：换行：」』附
                                        『}』
                                    ）
                            ）
                        ））而
                        虑闭包名函数者递归同变量于闭包而
                        虑创建数组名者创建固定长度的数组于写出于二而「：优化！：」
                        （写出于（
                            包裹函数体于（
                                『%函数值 = bitcast i64* (i64*, i64*)* @』附（函数名）附『 to i64*「：换行：」』附
                                『%闭包值 = call i64* @』附（闭包名函数）附（已有参数签名）附『「：换行：」』附
                                『%返回值 = call i64* @』附（创建数组名）附（获取参数签名于【『函数值』，『闭包值』】）附『「：换行：」』附
                                （默认返回于『%返回值』）
                            ）））
                    ）
                或有（式节点于（闭包函数调用节点）于函数衔参数衔【】）则
                    （
                        虑函数函数名者递归同变量于函数而
                        虑参数函数名者递归同变量于参数而
                        （写出于（
                            包裹函数体于（
                                『%函数包 = call i64* @』附（函数函数名）附（已有参数签名）附『「：换行：」』附
                                『%参数值 = call i64* @』附（参数函数名）附（已有参数签名）附『「：换行：」』附
                                『%函数包指针 = bitcast i64* %函数包 to i64**「：换行：」』附
                                『%函数值指针 = getelementptr i64*, i64** %函数包指针, i64 0「：换行：」』附
                                『%函数值值 = load i64*, i64** %函数值指针「：换行：」』附
                                『%函数值 = bitcast i64* %函数值值 to i64* (i64*, i64*)*「：换行：」』附
                                『%闭包值指针 = getelementptr i64*, i64** %函数包指针, i64 1「：换行：」』附
                                『%闭包值 = load i64*, i64** %闭包值指针「：换行：」』附
                                『%返回值 = call i64* %函数值值』附（获取参数签名于【『函数值』，『参数值们』】）附『「：换行：」』附
                                （默认返回于『%返回值』）
                            ）
                        ））
                    ）
                或有（式节点于（展开后内建节点于量）于参数们）则
                    （
                        虑后参数函数名们者态射于递归同变量于参数们而
                        鉴量而
                        有「内建类型字符串」      则（空写出于元）
                        或有「内建类型整数」        则（空写出于元）
                        或有「内建类型小数」       则（空写出于元）
                        或有「内建类型动态分类值」     则（空写出于元）
                        或有「内建类型有」         则（空写出于元）
                        或有「内建类型爻」         则（空写出于元）
                        或有「内建类型元类型」       则（空写出于元）
                        或有「内建类型新的外部类型」       则（空写出于元）
                        或有「内建爻阳」          则写出于（
                                                    包裹函数体于（
                                                        『%爻值阳 = inttoptr i1 1 to i64*「：换行：」』附
                                                        （默认返回于『%爻值阴』）
                                                    ）
                                                ）
                        或有「内建爻阴」          则（写出于（
                                                        包裹函数体于（
                                                            『%爻值阴 = inttoptr i1 0 to i64*「：换行：」』附
                                                            （默认返回于『%爻值阴』）
                                                        ）
                                                    ）
                                                ）
                        或有「内建有元」          则（空写出于元）
                        或有「内建函数整数相等」    则
                                （鉴后参数函数名们而
                                有左名衔右名衔【】则写出于（
                                    包裹函数体于（
                                        『%左值值 = call i64* @』附（左名）附（已有参数签名）附『「：换行：」』附
                                        『%右值值 = call i64* @』附（右名）附（已有参数签名）附『「：换行：」』附
                                        『%左值 = ptrtoint i64* %左值值 to i64「：换行：」』附
                                        『%右值 = ptrtoint i64* %右值值 to i64「：换行：」』附
                                        『%结果值 = icmp eq i64 %左值, %右值「：换行：」』附
                                        『%结果 = inttoptr i1 %结果值 to i64*「：换行：」』附
                                        （默认返回于『%结果』）
                                    ）
                                ）
                                或有「其他」则（发生事故于『期待两个参数』）
                                ）
                        或有「内建函数整数大于」    则
                                （鉴后参数函数名们而
                                有左名衔右名衔【】则写出于（
                                    包裹函数体于（
                                        『%左值值 = call i64* @』附（左名）附（已有参数签名）附『「：换行：」』附
                                        『%右值值 = call i64* @』附（右名）附（已有参数签名）附『「：换行：」』附
                                        『%左值 = ptrtoint i64* %左值值 to i64「：换行：」』附
                                        『%右值 = ptrtoint i64* %右值值 to i64「：换行：」』附
                                        『%结果值 = icmp gt i64 %左值, %右值「：换行：」』附
                                        『%结果 = inttoptr i1 %结果值 to i64*「：换行：」』附
                                        （默认返回于『%结果』）
                                    ）
                                ）
                                或有「其他」则（发生事故于『期待两个参数』）
                                ）
                        或有「内建函数整数减」    则
                                （鉴后参数函数名们而
                                有左名衔右名衔【】则写出于（
                                    包裹函数体于（
                                        『%左值值 = call i64* @』附（左名）附（已有参数签名）附『「：换行：」』附
                                        『%右值值 = call i64* @』附（右名）附（已有参数签名）附『「：换行：」』附
                                        『%左值 = ptrtoint i64* %左值值 to i64「：换行：」』附
                                        『%右值 = ptrtoint i64* %右值值 to i64「：换行：」』附
                                        『%结果值 = sub i64 %左值, %右值「：换行：」』附
                                        『%结果 = inttoptr i64 %结果值 to i64*「：换行：」』附
                                        （默认返回于『%结果』）
                                    ）
                                ）
                                或有「其他」则（发生事故于『期待两个参数』）
                                ）
                        或有「内建函数抛出异常」    则（发生事故于『未有213：』附（表达式表示于（式）））
                        或有「内建函数尝试运行」    则（发生事故于『未有213：』附（表达式表示于（式）））
                        或有「内建函数以当前续延调用」    则（发生事故于『未有213：』附（表达式表示于（式）））
                        或有「内建函数新建动态分类」    则（发生事故于『未有213：』附（表达式表示于（式）））
                        或有 「其他」            则（发生事故于『未有213：』附（表达式表示于（式）））
                    ）
                或有（式节点于（空结构节点）于【】）则
                    （空写出于元）
                或有（式节点于（爻分支节点）于爻式衔阳式衔阴式衔【】）则
                    （
                        虑爻式函者递归同变量于爻式而
                        虑阳式函者递归同变量于阳式而
                        虑阴式函者递归同变量于阴式而

                        写出于（
                            包裹函数体于（
                                『%爻值 = call i64* @』附（爻式函）附（已有参数签名）附『「：换行：」』附
                                『%爻 = ptrtoint i64* %爻值 to i64「：换行：」』附
                                『%爻为真 = icmp ne i64 %爻, 0「：换行：」』附
                                『br i1 %爻为真, label %真, label %假「：换行：」』附
                                『真：』附
                                『%真值 = call i64* @』附（阳式函）附（已有参数签名）附『「：换行：」』附
                                『br label %后「：换行：」』附
                                『假：』附
                                『%假值 = call i64* @』附（阴式函）附（已有参数签名）附『「：换行：」』附
                                『br label %后「：换行：」』附
                                『后：』附
                                『%结果值 = phi i64* [ %真值, %真 ], [ %假值, %假 ]「：换行：」』附
                                （默认返回于『%结果值』）
                            ）
                        ）
                    ）

                或有（式节点于（整数节点于数）于【】）则
                    （
                        写出于（
                            包裹函数体于（
                                『%结果值 = inttoptr i64 』附（整数表示于数）附『 to i64*「：换行：」』附
                                （默认返回于『%结果值』）
                            ）
                        ）
                    ）
                或有（式节点于（「小数节点」于数于「整小部」）于【】）则
                    （
                        写出于（
                            包裹函数体于（
                                『%结果值 = bitcast double 』附（整数表示于（「整小部」中零））附（『.』）附（整数表示于（「整小部」中一））附『 to i64*「：换行：」』附
                                （默认返回于『%结果值』）
                            ）
                        ）
                    ）
                或有（式节点于（字符串节点于串）于【】）则
                    （
                        虑串名者下个字符序数于『字符串』而
                        写出于（
                            『@』附（串名）附『 = private constant [』附（整数表示于（（字节长度于串）加一））附（『 x i8 ] c"』）附
                            串附『\00“』
                        ）
                        ；
                        写出于（
                            包裹函数体于（
                                『%结果值 = bitcast [』附（整数表示于（（字节长度于串）加一））附（『 x i8 ] @』）附串名附（『 to i64*「：换行：」』）附
                                （默认返回于『%结果值』）
                            ）
                        ）
                    ）
                或有（式节点于「闭包递归内联虑无类型」于双绑定衔闭包衔下个衔【】）则
                （
                    （
                        虑递归函数名者下个字符序数于『递归函数』而
                        虑无者（解绑于双绑定于（会闭包名而会单绑定而
                            虑函体者式替换于（式节点于（递归函数待调用节点于递归函数名）于【自由变量于闭包名】）于单绑定而
                            虑函体函数名者递归于【闭包名】于函体而
                                写出于（
                                    『define i64* @』附（递归函数名）附（获取参数签名于【闭包名】）附『 {「：换行：」』附
                                    『%返回值 = call i64* @』附（函体函数名）附（获取参数签名于【闭包名】）附『「：换行：」』附
                                    『ret i64* %返回值「：换行：」』附
                                    『}』
                                ）
                            ）
                        ）而
                        虑闭包函数名者递归同变量于闭包而
                        解绑于下个于（会后名而会后下个而
                            虑下个函数者递归于（已有自由变量接【后名】）于下个而
                            （写出于
                            （包裹函数体于（
                                『%递归闭包 = call i64* @』附（闭包函数名）附（已有参数签名）附『「：换行：」』附
                                『%』附（后名）附『 = call i64* @』附（递归函数名）附（获取参数签名于【『递归闭包』】）附『「：换行：」』附
                                『%后续 = call i64* @』附（下个函数）附（获取参数签名于（已有自由变量接【后名】））附『「：换行：」』附
                                （默认返回于（『%后续』））
                            ））
                        ）
                    ））
                ）
                或有（式节点于模式匹配于分析式衔分支们）则
                    （式节点于模式匹配于（递归于分析式）衔（态射于递归于分支们））
                或有（式节点于（模式匹配分支）于模式衔结果衔【】）则
                    （式节点于（模式匹配分支）于（递归于模式）衔（递归于结果）衔【】）
                或有（式节点于（对子构造节点）于元素一衔元素二衔【】）则
                    （式节点于（对子构造节点）于（递归于元素一）衔（递归于元素二）衔【】）
                或有（式节点于（对子构造结尾节点）于【】）则
                    式
                或有（式节点于（对子解构节点）于对子衔序数式衔【】）则
                    （式节点于（对子解构节点）于（递归于对子）衔（递归于序数式）衔【】）
                或有（式节点于顺序执行节点于式甲衔式乙衔【】）则
                    （式节点于顺序执行节点于（递归于式甲）衔（递归于式乙）衔【】）
                或有（式节点于（唯一构造器节点于（序数））于构造器类衔【】）则
                    （递归于（展开唯一构造器节点于构造器类于序数于【】））
                或有（式节点于（文件引用节点于新文件名）于【】）则
                    式
                或有（式节点于（「解析后外部调用节点带类型」于串）于类衔参）则
                    （式节点于（「解析后外部调用节点带类型」于串）于类衔（态射于递归于参））
                或有「其他」则发生事故于『未有代码生成310：』附（表达式表示于式）
        「： 
            于（会异常而
                发生事故于异常附『「：换行：」在代码生成』附（表达式表示于式）附『时』
        ） ：」
        也。

        返回名
」
也。

代码生成顶层乃化（化字符串而有）「：顶部的可执行代码写出：」而
            化表达式而字符串「：文件信息：」合字符串「：最终储存的编译信息：」也。
代码生成顶层者会顶部代码写出而会式而
    虑输出引用者新引用于【】而
    虑全局名者下个字符序数于『模块』而
    虑临时名者下个字符序数于『临时模块变量』而
    虑本次函数名者「代码生成」于（会新输出而（写引用于输出引用于（新输出衔（读引用于输出引用））））于【】于式而
    虑无者顶部代码写出于（
                『%』附临时名附『 = call i64* @』附本次函数名附『()「：换行：」』附
                『store i64* %』附临时名附『, i64** @』附全局名）而
    （以『「：换行：」』合并（读引用于输出引用））与（全局名）
    也。