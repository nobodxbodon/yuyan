「：This is untyped closure conversion. 
I have prepared groundwork for typed closure conversion, but I 
have not yet studied it.
：」



寻观标准库之书。
寻观豫言编译器之编译数据之抽象绑定树结构之抽象语法树之书。
寻观豫言编译器之编译数据之抽象绑定树结构之抽象语法树方法之书。
寻观豫言编译器之编译数据之抽象绑定树结构之抽象语法树相等方法之书。
寻观豫言编译器之编译数据之抽象绑定树结构之模块操作之书。
寻观豫言编译器之编译数据之编译配置之编译期输出之书。

寻观豫言编译器之编译数据之抽象绑定树结构之命名环境术之书。

观抽象语法之书。
观抽象语法表示之书。
观抽象语法相等之书。

寻观豫言编译器之编译数据之操作符之操作符数据结构之书。
寻观豫言编译器之编译步骤之语法分析之函数合集之书。
寻观豫言编译器之编译步骤之类型检查之元变量管理之书。
寻观豫言编译器之编译步骤之类型检查之顶部归一化之书。
寻观拓展库之顺序标识符之顺序标识符之书。

寻观豫言编译器之编译数据之编译配置之编译期输出之书。
寻观豫言编译器之编译数据之文件管理之编译文件信息之书。
寻观豫言编译器之编译数据之抽象绑定树结构之静态单例类型处理之书。

寻观代码生成工具之书。

「： 代码生成引用乃新引用于（化（化字符串而有）「：写全局文件：」
         而化字符串列「：当前所有的自由变量：」
         而化表达式「：待变换的式子：」
         而字符串「：函数名，必须以自由变量调用：」）也。
代码生成引用者会无而发生事故于『未有37』也。 ：」

直接代码生成乃化（化字符串而有）而
        「： 化字符串列而 ：」
        化字符串而
        化表达式「：待变换的式子：」
         而字符串「：字符串将赋值给返回名，不包含换行：」也。
直接代码生成者循「直接代码生成」以会写出而
「： 会已有名而 ：」
会返回名而会式而
    虑「

        「读名」者读取自由变量也。

        详细调试打印行于（会无而『直接代码生成中：』附（表达式表示于式））。

        默认返回乃化字符串而字符串也。
        默认返回者会串而
            『%"』附返回名附『" = 』附串附『「：换行：」』也。

        「： 递归代码生成者读引用于代码生成引用也。 ：」

        空返回乃字符串也。
        空返回者（默认返回于『inttoptr i64 0 to i64*』）也。

        转换结果乃字符串也。
        转换结果者
        尝试运行于 （
         会无而
            鉴式而
                有（自由变量于名）则
                        默认返回于（『bitcast i64* %"』附名附『" to i64*』）
                或有（式节点于（正则结构结尾节点无类型）于参数）则
                    （虑参数们者态射于（会参而
                        鉴参而有（式节点于（正则结构结尾参数节点无类型于投名）于（自由变量于参名）衔【】）
                            则参名
                            或有「其他」则发生事故于『113，不正确，闭包转换不应该改变正则结构结尾参数节点』
                            ）于参数而
                      虑数组创建函数者创建固定长度的数组于写出于（长度于参数们）而
                        默认返回于（『call i64* @"』附（数组创建函数）附『"』附（获取普通参数签名于（参数们）））
                    ）
                或有（式节点于（闭包变量节点）于参数们）则
                    （
                      虑参数名们者态射于「读名」于参数们而
                      虑数组创建函数者创建固定长度的数组于写出于（长度于参数们）而
                        默认返回于（『call i64* @"』附（数组创建函数）附『"(』附（
                                            （以『,』合并（
                                                态射于（会名而（ 『i64* %"』附（名）附『"』 ））于参数名们
                                            ））
                                        ））
                    ）
                或有（式节点于（文件引用节点于文件名）于【】）则
                    （
                        虑文件全局名者（读取代码生成信息于文件名）中零而
                            默认返回于（『load i64*, i64** @"』附文件全局名附『"』）
                    ）
                或有（式节点于（结构投影带序数于投影名于序数）于结构衔【】）则
                    （
                        虑结构名者读名于结构而
                        （
                            『%"结构体指针" = bitcast i64* %"』附结构名附『" to i64**「：换行：」』附
                            『%"返回值指针" = getelementptr i64*, i64** %"结构体指针", i64 』附（整数表示于序数）附『「：换行：」』附
                            （默认返回于『load i64*, i64** %"返回值指针"』）
                        ）
                    ）
                或有（式节点于（闭包变量投影节点于序数）于闭包衔【】）则
                    （
                        虑闭包名者读名于闭包而
                        （
                                『%"闭包体指针" = bitcast i64* %"』附闭包名附『" to i64**「：换行：」』附
                                『%"返回值指针" = getelementptr i64*, i64** %"闭包体指针", i64 』附（整数表示于序数）附『「：换行：」』附
                                （默认返回于『load i64*, i64** %"返回值指针"』）
                        ）
                    ）
                「： 或有（式节点于（闭包拉姆达抽象）于双绑定衔闭包衔【】）则
                    （
                        「： 虑函数名者下个字符序数于『函数』而 ：」
                        虑函数名者（解绑于双绑定于（会闭包名而会单绑定而
                            解绑于单绑定于（会参数名而会函体而
                                虑函体函数名者「递归代码生成」于写出于【闭包名， 参数名】于函体而
                                喊提函数名
                                    「： 写出于（「：TODO 其实不用定义这个：」
                                        『define internal i64* @"』附（函数名）附『"』附（获取声明参数签名于【闭包名，参数名】）附『 {「：换行：」』附
                                        『%"返回值" = call i64* @"』附（函体函数名）附『"』附（获取声明参数签名于【闭包名，参数名】）附『「：换行：」』附
                                        『ret i64* %"返回值"「：换行：」』附
                                        『}』
                                    ） ：」
                            ）
                        ））而
                        虑闭包名者读名于闭包而
                        虑创建数组名者创建固定长度的数组于写出于二而「：优化！：」
                        （
                            『%"函数值" = bitcast i64* (i64*, i64*, i64* (i64*)*)* @"』附（函数名）附『" to i64*「：换行：」』附
                            （默认返回于『call i64* @"』附（创建数组名）附『"』附（获取普通参数签名于【『函数值』，闭包名】））
                        ）
                    ） ：」
                或有（式节点于（闭包函数调用节点）于函数衔参数衔【】）则
                    （
                        虑函数名者读名于函数而
                        虑参数名者读名于参数而
                                『%"函数包指针" = bitcast i64* %"』附（函数名）附『" to i64**「：换行：」』附
                                『%"函数值指针" = getelementptr i64*, i64** %"函数包指针", i64 0「：换行：」』附
                                『%"函数值值" = load i64*, i64** %"函数值指针"「：换行：」』附
                                『%"函数值" = bitcast i64* %"函数值值" to i64* (i64*, i64*, i64* (i64*)*)*「：换行：」』附
                                『%"闭包值指针" = getelementptr i64*, i64** %"函数包指针", i64 1「：换行：」』附
                                『%"闭包值" = load i64*, i64** %"闭包值指针"「：换行：」』附
                                （默认返回于『call i64* %"函数值"』附（获取声明参数签名于【『闭包值』，参数名】））
                    ）
                或有（式节点于（展开后内建节点于量）于参数们）则
                    （
                        虑参数名们者态射于「读名」于参数们而
                        鉴量而
                        有「内建类型字符串」      则（空返回）
                        或有「内建类型整数」        则（空返回）
                        或有「内建类型小数」       则（空返回）
                        或有「内建类型动态分类值」     则（空返回）
                        或有「内建类型有」         则（空返回）
                        或有「内建类型爻」         则（空返回）
                        或有「内建类型元类型」       则（空返回）
                        或有「内建类型新的外部类型」       则（空返回）
                        或有「内建爻阳」          则（
                                                        （默认返回于『inttoptr i1 1 to i64*』）
                                                ）
                        或有「内建爻阴」          则（
                                                        （默认返回于『inttoptr i1 0 to i64*』）
                                                ）
                        或有「内建有元」          则（空返回）
                        或有「内建函数整数相等」    则
                                （鉴参数名们而
                                有左名衔右名衔【】则（
                                        『%"左值" = ptrtoint i64* %"』附（左名）附『" to i64「：换行：」』附
                                        『%"右值" = ptrtoint i64* %"』附（右名）附『" to i64「：换行：」』附
                                        『%"结果值" = icmp eq i64 %"左值", %"右值"「：换行：」』附
                                        （默认返回于『inttoptr i1 %"结果值" to i64*』）
                                ）
                                或有「其他」则（发生事故于『期待两个参数』）
                                ）
                        或有「内建函数整数大于」    则
                                （鉴参数名们而
                                有左名衔右名衔【】则（
                                    『%"左值" = ptrtoint i64* %"』附（左名）附『" to i64「：换行：」』附
                                    『%"右值" = ptrtoint i64* %"』附（右名）附『" to i64「：换行：」』附
                                    『%"结果值" = icmp sgt i64 %"左值", %"右值"「：换行：」』附
                                    （默认返回于『inttoptr i1 %"结果值" to i64*』）
                                ）
                                或有「其他」则（发生事故于『期待两个参数』）
                                ）
                        或有「内建函数整数减」    则
                                （鉴参数名们而
                                有左名衔右名衔【】则（
                                        『%"左值" = ptrtoint i64* %"』附（左名）附『" to i64「：换行：」』附
                                        『%"右值" = ptrtoint i64* %"』附（右名）附『" to i64「：换行：」』附
                                        『%"结果值" = sub i64 %"左值", %"右值"「：换行：」』附
                                        （默认返回于『inttoptr i64 %"结果值" to i64*』）
                                ）
                                或有「其他」则（发生事故于『期待两个参数』）
                                ）
                        或有「内建函数以当前续延调用」    则（发生事故于『未有213：』附（表达式表示于（式）））
                        或有 「其他」            则（发生事故于『未有213：』附（表达式表示于（式）））
                    ）
                或有（式节点于（空结构节点）于【】）则
                    （空返回）
                「： 或有（式节点于（爻分支节点）于爻式衔阳式衔阴式衔【】）则
                    （
                        虑爻式函者递归同变量于爻式而
                        虑阳式函者递归同变量于阳式而
                        虑阴式函者递归同变量于阴式而

                        写出于（
                            包裹函数体于（
                                『%"爻值" = call i64* @"』附（爻式函）附『"』附（已有调用参数签名）附『「：换行：」』附
                                『%"爻" = ptrtoint i64* %"爻值" to i64「：换行：」』附
                                『%"爻为真" = icmp ne i64 %"爻", 0「：换行：」』附
                                『br i1 %"爻为真", label %"真", label %"假"「：换行：」』附
                                『"真":「：换行：」』附
                                『%"真值" = call i64* @"』附（阳式函）附『"』附（已有调用参数签名）附『「：换行：」』附
                                『br label %"后"「：换行：」』附
                                『"假":「：换行：」』附
                                『%"假值" = call i64* @"』附（阴式函）附『"』附（已有调用参数签名）附『「：换行：」』附
                                『br label %"后"「：换行：」』附
                                『"后":「：换行：」』附
                                『%"结果值" = phi i64* [ %"真值", %"真" ], [ %"假值", %"假" ]「：换行：」』附
                                （默认返回于『%"结果值"』）
                            ）
                        ）
                    ） ：」

                或有（式节点于（整数节点于数）于【】）则
                    （
                        （默认返回于『inttoptr i64 』附（整数表示于数）附『 to i64*』）
                    ）
                或有（式节点于（「小数节点」于数于「整小部」）于【】）则
                    （
                        （默认返回于『bitcast double 』附（整数表示于（「整小部」中零））附（『.』）附（整数表示于（「整小部」中一））附『 to i64*』）
                    ）
                或有（式节点于（字符串节点于串）于【】）则
                    （
                        虑串名者下个字符序数于『字符串』而
                        写出于（
                            『@"』附（串名）附『" = private constant [』附（整数表示于（（字节长度于串）加一））附（『 x i8 ] c"』）附
                            串附『\00“』
                        ）
                        ；
                        （默认返回于『bitcast [』附（整数表示于（（字节长度于串）加一））附（『 x i8 ] @"』）附串名附（『" to i64*』））
                    ）
                「： 或有（式节点于「闭包递归内联虑无类型」于双绑定衔闭包衔下个衔【】）则
                （
                    （
                        虑递归函数名者下个字符序数于『递归函数』而
                        虑无者（解绑于双绑定于（会闭包名而会单绑定而
                            虑函体者式替换于（式节点于（递归函数待调用节点于递归函数名）于【自由变量于闭包名】）于单绑定而
                            虑函体函数名者递归于【闭包名】于函体而
                                写出于（
                                    『define internal i64* @"』附（递归函数名）附『"』附（获取声明参数签名于【闭包名】）附『 {「：换行：」』附
                                    『%"返回值" = call i64* @"』附（函体函数名）附『"』附（获取调用参数签名于【闭包名】）附『「：换行：」』附
                                    『ret i64* %"返回值"「：换行：」』附
                                    『}』
                                ）
                            ）
                        ）而
                        虑闭包函数名者递归同变量于闭包而
                        解绑于下个于（会后名而会后下个而
                            虑下个函数者递归于（已有自由变量接【后名】）于后下个而
                            （写出于
                            （包裹函数体于（
                                『%"递归闭包" = call i64* @"』附（闭包函数名）附『"』附（已有调用参数签名）附『「：换行：」』附
                                『%"』附（后名）附『" = call i64* @"』附（递归函数名）附『"』附（获取调用参数签名于【『递归闭包』】）附『「：换行：」』附
                                『%"后续" = call i64* @"』附（下个函数）附『"』附（获取调用参数签名于（已有自由变量接【后名】））附『「：换行：」』附
                                （默认返回于（『%"后续"』））
                            ））
                        ）
                    ））
                ） ：」
                「： 或有（式节点于模式匹配于分析式衔分支们）则
                    （
                        「：分支会被编译成当前自由变量加上被匹配的变量，分支自己加入更多的变量：」
                        虑分析式函者递归同变量于分析式而
                        「： 虑新参数者获取参数签名于（已有自由变量接【『分析式』】）而 ：」
                        写出于（    
                            包裹函数体于（
                                『%"分析式" = call i64* @"』附（分析式函）附『"』附（已有调用参数签名）附『「：换行：」』附
                                （虑「
                                    处理分支乃化整数而化表达式列而字符串也。
                                    处理分支者循处理分支以会数而会剩余分支们而
                                        鉴剩余分支们而
                                            有【】则（
                                                『分支』附（整数表示于数）附『:「：换行：」』附
                                                『%"返回" = call i64* yyThrowException(i64* 0)「：换行：」』附
                                                （默认返回于『%"返回"』）
                                            ）
                                            或有（当前）衔剩余则（
                                                虑条件函数者编译模式匹配分支条件于写出于当前而
                                                虑执行函数者递归于（已有自由变量接【『分析式』】）于当前而
                                                『分支』附（整数表示于数）附『:「：换行：」』附
                                                『%"条件" = call i1 @"』附（条件函数）附『"(i64* 分析式)「：换行：」』附
                                                『br i1 %"条件", label %"进入", label %"分支"』附（整数表示于（数加一））附『「：换行：」』附
                                                『进入:「：换行：」』附
                                                『%"返回" = call i64* @"』附（执行函数）附『"』附（获取调用参数签名于（已有自由变量接【『分析式』】））附『「：换行：」』附
                                                『ret i64* %"返回"』附『「：换行：」』附
                                                （处理分支于（数加一） 于剩余）
                                            ）也。
                                    处理分支于零于分支们
                                」）
                            ）
                        ）
                    ）
                或有（式节点于（模式匹配分支）于模式衔结果衔【】）则
                    （
                        虑新变量们者读取模式匹配新变量于模式而
                        虑结果函数者递归于（已有自由变量接新变量们）于模式而
                        虑分析式名者『分析式』而
                        写出于（
                            『def i64* @"』附（返回名）附『"』附（获取声明参数签名于（已有自由变量接【分析式名】））附『 {「：换行：」』附
                            （编译模式匹配变量于写出于分析式名于模式）附
                            『%"返回值" = call i64* @"』附（结果函数）附『"』附（获取调用参数签名于（已有自由变量接新变量们））附『「：换行：」』附
                            『ret i64* %"返回值"』附『「：换行：」』附
                            『}』
                        ）
                    ） ：」
                或有（式节点于（对子构造节点）于元素零衔元素一衔【】）则
                    （
                        虑元素零名者读名于元素零而
                        虑元素一名者读名于元素一而
                        虑创建数组函数者创建固定长度的数组于写出于二而
                                （默认返回于『call i64* @"』附（创建数组函数）附『"(i64* %"』附（元素零名）附『", i64* %"』附（元素一名）附『")』）
                    ）
                或有（式节点于（对子构造结尾节点）于【】）则
                    （空返回）
                或有（式节点于（对子解构节点）于对子衔序数式衔【】）则
                    （
                        虑对子名者读名于对子而
                        虑序数名者读名于序数式而
                            『%"序数值" = bitcast i64* %"』附序数名附『" to i64「：换行：」』附
                            『%"对子数组" = bitcast i64* %"』附对子名附『" to i64**「：换行：」』附
                            『%"目标指针" = getelementptr i64*, i64** %"对子数组", i64 %"序数值"「：换行：」』附
                            （默认返回于（『load i64*, i64** %"目标指针"』））
                    ）
                「： 或有（式节点于顺序执行节点于式甲衔式乙衔【】）则
                    （
                        虑式甲函数者递归同变量于式甲而
                        虑式乙函数者递归同变量于式乙而
                        写出于（
                            包裹函数体于（
                                『%"顺序第一结果" = call i64* @"』附（式甲函数）附『"』附（已有调用参数签名）附『「：换行：」』附
                                『%"顺序第二结果" = call i64* @"』附（式乙函数）附『"』附（已有调用参数签名）附『「：换行：」』附
                                （默认返回于（『%"顺序第二结果"』））
                            ）
                        ）
                    ） ：」
                或有（式节点于（展开后唯一构造器节点于（序数））于参数）则
                    （
                        虑参数名们者态射于读名于参数而
                        虑数组构建名者创建固定长度的数组于写出于（（长度于参数）加一）而
                                『%"构造器序数" = inttoptr i64 』附（整数表示于序数）附『 to i64*「：换行：」』附
                                （默认返回于（『call i64* @"』附（数组构建名）附『"(, 』附（
                                            （以『,』合并（
                                                『i64* %"构造器序数"』衔（
                                                        态射于（会参数名而（ 『i64* %"』附（参数名）附『"』 ））于参数名们
                                                    ）））
                                        ）附『)』））
                    ）
                或有（式节点于（「解析后外部调用节点无类型」于串）于参数）则
                （
                    虑参数名们者态射于读名于参数而
                    虑数组构建名者创建固定长度的数组于写出于（（长度于参数）加一）而
                            （默认返回于（『call i64* @"』附（串）附『"(』附（
                                        （以『,』合并（
                                            态射于（会参数名而（ 『i64* %"』附（参数名）附『"』 ））于参数名们
                                        ））
                                    ）附『)』））
                ）
                或有「其他」则发生事故于『未有直接代码生成497：』附（表达式表示于式）
        ） 
            于（会异常而
                发生事故于异常附『「：换行：」在代码生成』附（表达式表示于式）附『时』
        ） 
        也。

        转换结果
」
也。