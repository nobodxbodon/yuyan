寻标准库之书。
观标准库之书。


寻观拓展库之顺序标识符之顺序标识符之书。




寻观标准库之操作系统之路径之书。


寻观豫言编译器之编译步骤之语法分析之函数合集之书。

「： 寻观豫言编译器之编译步骤之代码生成之代码生成之书。 ：」
「： 寻观豫言编译器之编译步骤之代码生成之代码生成工具之书。 ：」
「： 寻观豫言编译器之编译步骤之代码生成之目标信息之书。 ：」

寻观豫言编译器之编译数据之编译配置之编译期输出之书。
寻观豫言编译器之编译数据之编译配置之全局配置之书。
寻观豫言编译器之编译步骤之总体过程之编译过程工具之书。

寻观名称转译之书。
「： 寻观代码生成工具之书。 ：」
「： 寻观编译过程工具之书。 ：」

「： 寻观程序整合之书。 ：」



编译非全局主模块乃化字符串而有也。
编译非全局主模块者会路径而
    虑程序本体者（
        『val entryMain = fn () => (「：换行：」let「：换行：」』附
        （以『「：换行：」』合并（
                态射于（会路径而
                    『 val _ = 』附（名称转译于（当前路径转全局函数名于路径））附『((0,0,0)); 「：换行：」』
                ）于（读引用于文件编译顺序）
            ）
        ）附『「：换行：」in 0 end』附
        『);「：换行：」』附
        『entryMain();』
    ）而
    虑无者文件系统之写文件于（（获取输出文件路径于路径）附『.sml』）于程序本体而
    元也。


标准元语生成可执行程序并执行乃化字符串「：输入文件路径：」而整数「：退出状态：」也。
标准元语生成可执行程序并执行者会当前路径而
        虑模块名者去除路径结尾豫言拓展名于（路径之获取文件名于当前路径）而
        虑虚拟输出文件路径者『yy_』附模块名附『_豫言编译器默认执行包。豫』而
        虑运行函数者若读引用于打印执行的外部指令则操作系统之子进程之成功运行并打印结果否则操作系统之子进程之成功运行而
        虑无者
            （若读引用于「使用全局编译」
            则（
                虑无者（读引用于编译全局主模块引用）于虚拟输出文件路径而
                元
            ）
            否则（
                虑虚拟主文件路径者『yy_』附模块名附『_豫言编译器默认入口文件。豫』而 
                虑无者编译非全局主模块于虚拟主文件路径而
                虑临时文件路径者『』附（下个字符序数于『yy_all』）附『。豫』而
                虑无者
                （
                    （

                        文件系统之写文件于（（获取输出文件路径于临时文件路径）附『.sml』）于（
                            以『「：换行：」』合并
                                    （
                                        『「：换行：」』衔
                                        （
                                            文件系统之读文件于
                                        『runtime/mlton/yylibrary.sml』）衔
                            （态射于（会路径而
                                    文件系统之读文件于
                                    （（获取输出文件路径于路径）附（『.sml』））
                                ）于（（读引用于文件编译顺序）接【虚拟主文件路径】）
                            ））

                        ）；
                        文件系统之写文件于（（获取输出文件路径于虚拟输出文件路径）附『.mlb』）
                        于（
                            『
$(SML_LIB)/basis/basis.mlb
$(SML_LIB)/basis/sml-nj.mlb
$(SML_LIB)/smlnj-lib/smlnj-lib.mlb
$(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
$(SML_LIB)/mllpt-lib/mllpt-lib.mlb
$(SML_LIB)/smlnj-lib/JSON/json-lib.mlb
$(SML_LIB)/cml/cml.mlb


                            
local
    ann
       "nonexhaustiveMatch ignore"
       "allowExtendedTextConsts true"
       "allowOrPats true"
    in「：换行：」』附（（（获取输出文件路径于临时文件路径）附『.sml』）


    ）附『「：换行：」    end
in


end』
                        ）
                ））而
                元
            
            ））而
        虑可执行文件输出路径者（鉴（读引用于输出可执行文件路径）而
            有（可有「输出路径」）则输出路径
            或有「可无」则（获取输出文件路径于虚拟输出文件路径）附『.exe』）而
        虑无者（
                运行函数于『mlton』于（【
                「： （『-default-ann』），
                （『'nonexhaustiveMatch ignore'』），
                （『-default-ann』），
                （『'allowExtendedTextConsts true'』） ：」
                】接【
                （『-output』），
                可执行文件输出路径，
                （（获取输出文件路径于虚拟输出文件路径）附『.mlb』）
                】）
            ）而
        虑退出状态者（若读引用于仅执行编译不运行则零否则
            （
                虑可执行路径者（若路径名是绝对路径于（可执行文件输出路径）则（可执行文件输出路径）否则『./』附（可执行文件输出路径））而
                （（非常粗略调试打印行于（会无而『正在运行目标程序：     』附（可执行路径）附『 』附（以『 』合并（读引用于运行时命令行参数））））；
                操作系统之子进程之运行并传递输出于（可执行路径）于（（读引用于运行时命令行参数）））
            ）
        ）而
        退出状态
        也。


