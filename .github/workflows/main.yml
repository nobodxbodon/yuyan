# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master , develop]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# cancel previous run on new pushes to PR
concurrency:
  group:  ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  macos-test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/install-mac-dependencies

      - name: make test
        run: make test

      # # - name: make bsrttcv
      # #   run: make bsrttcv

      # - name: make bsrtv
      #   if: '! github.event.pull_request.draft'
      #   run: make bsrtv

      # - name: make bsrtvvv
      #   if: failure()
      #   run: make bsrtvvv

  macos-bs-test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/install-mac-dependencies

      - name: make bsrt
        if: '! github.event.pull_request.draft'
        run: make bsrt

  macos-bs-build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/install-mac-dependencies
      - name: make bsr
        if: '! github.event.pull_request.draft'
        run: make bsr

      - uses: actions/upload-artifact@v3
        with:
          name: macos-release-package
          path: |
            ./yy
            ./install.sh
            ./runtime/libyyrtdebug.a
            ./runtime/libyyrtopt.a
            ./yylib

  # This workflow contains a single job called "build"
  ubuntu-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/install-linux-dependencies

      - name: make test
        run: make test

  ubuntu-test-bs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/install-linux-dependencies

      - name: make test_bs
        run: make test_bs

  ubuntu-bs-test-tc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/install-linux-dependencies

      - name: make bsrttc
        run: make bsrttc

  ubuntu-bs-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/install-linux-dependencies

      - name: make bsrt
        if: '! github.event.pull_request.draft'
        run: make bsrt

      - name: make bsrtvv
        if: failure()
        run: make bsrtvv

  ubuntu-bs-build-tc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/install-linux-dependencies
      - name: make bsrtc
        if: '! github.event.pull_request.draft'
        run: make bsrtc

      - name: make bsrtcvv
        if: failure()
        run: make bsrtcvv

  ubuntu-bs-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/install-linux-dependencies
      - name: make bsr
        if: '! github.event.pull_request.draft'
        run: make bsr

      - name: make bsrvv
        if: failure()
        run: make bsrvv

      - uses: actions/upload-artifact@v3
        with:
          name: ubuntu-linux-release-package
          path: |
            ./yy
            ./install.sh
            ./runtime/libyyrtdebug.a
            ./runtime/libyyrtopt.a
            ./yylib



      # - name: Install MLton
      #   run: |
      #     wget https://phoenixnap.dl.sourceforge.net/project/mlton/mlton/20210117/mlton-20210117-1.amd64-linux-glibc2.31.tgz
      #     tar -xvzf mlton-20210117-1.amd64-linux-glibc2.31.tgz
      #     cd mlton-20210117-1.amd64-linux-glibc2.31/
      #     sudo make
      #     sudo make install

      # - name: Install MatPlot++
      #   run: |
      #     git clone https://github.com/alandefreitas/matplotplusplus.git
      #     cd matplotplusplus
      #     mkdir build
      #     cd build
      #     cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-O2" -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF 
      #     sudo cmake --build . --parallel 2 --config Release
      #     sudo cmake --install .
