
寻内建类型之书。
观内建类型之书。
寻标准库之数据结构之多态列之书。
观标准库之数据结构之多态列之书。



引用操作乃（承乙而「
    甲乃元类型也。
    创造乃（化乙而（甲））也。
    读取乃（化甲而（乙））也。
    写乃（化乙而化甲而（有））也。
                      」）也。
引用操作者受乙而 （
   「 
        甲乃元类型也。
        甲者《《内建类型：新的外部类型》》也。
        创造乃（化乙而（甲））也。
        创造者（会值而《《C调用》》名『yyNewRef』传值）也。
        读取乃（化甲而（乙））也。
        读取者（会引用而《《C调用》》名『yyReadRef』传（引用））也。
        写乃（化乙而化甲而（有））也。
        写者（会值而会引用而《《C调用》》名『yyWriteRef』传值与（引用））也。
    」
                      
    
）也。





数组操作乃（承乙而「
                      甲乃元类型也。
                      创造乃（化乙而化整数而（甲））也。
                      读取乃（化甲而化整数而（乙））也。
                      写乃（化乙而化整数而化甲而（有））也。
                      」）也。
数组操作者「
        甲乃元类型也。
        甲者《《内建类型：新的外部类型》》也。
        创造乃（化乙而化整数而（甲））也。
        创造者（会值而会长度而《《C调用》》名『yyNewRefArray』传值与长度）也。
        读取乃（化甲而化整数而（乙））也。
        读取者（会引用而会索引而《《C调用》》名『yyReadRefArray』传（引用）与索引）也。
        写乃（化乙而化整数而化甲而（有））也。
        写者（会值而会索引而会引用而《《C调用》》名『yyWriteRefArray』传值与索引与（引用））也。
    」
也。

「： 注TODO:
我们应该支持letin结构「
以数组操作为承元类型者乙而（夫甲表元类型合
                      夫创造表（化乙而化整数而（甲））合
                      夫读取表（化甲而化整数而（乙））合
                      夫写表（化乙而化整数而化甲而（有）））。
数组操作者虑（
    数组引用值类者《《内建类型：新的外部类型》》也。
）以成（数组引用值类与
    （会值而会长度而《《C调用》》名『yyNewRefArray』传值与长度）与
    （会引用而会索引而《《C调用》》名『yyReadRefArray』传（引用）与索引）与
    （会值而会索引而会引用而《《C调用》》名『yyWriteRefArray』传值与索引与（引用））
）之道也。
」。 ：」

「：更新的引用，我感觉老版引用是我们尚未引入Type Constructor时候写的，用起来十分麻烦：」

引用类立化元类型而元类型也。

新引用乃承甲而化甲而引用类于甲也。
新引用者会值而《《C调用》》名『yyNewRef』传值也。

读引用乃承甲而化引用类于甲而甲也。
读引用者会引用而《《C调用》》名『yyReadRef』传（引用）也。

写引用乃承甲而化引用类于甲而化甲而有也。
写引用者（会引用而会值而《《C调用》》名『yyWriteRef』传值与（引用））也。