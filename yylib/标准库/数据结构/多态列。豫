

寻爻术之书。
观爻术之书。

寻标准库之语言核心之内建类型之书。
观标准库之语言核心之内建类型之书。

寻整数操作之书。
观整数操作之书。
「： 寻标准库之语言核心之错误之书。 ：」
寻标准库之语言核心之异常之书。
观标准库之语言核心之异常之书。
「： 寻随机之书。 ：」
寻标准库之输入输出之笔之书。
寻可选值之书。
观可选值之书。

笔者标准库之输入输出之笔也。

索引异常者标准库之语言核心之异常之新建异常于有于『索引异常』也。

列立化元类型而元类型也。
〇列者列也。
术〇列交左序七零零也。
术列交无序七零零也。
空立（承元类型者甲而甲列）也。
多立（承元类型者甲而化甲而化甲列而甲列）也。

「：
〇，〇者多也。
术〇，〇交右序七零零也。
】者空也。
术】交无序七一零也。
：」
【】者空也。
术【】交无序七一零也。
〇衔〇者多也。
术〇衔〇交右序七零零也。
【〇】乃（承元类型者甲而化甲而甲列）也。
【〇】者会甲而甲衔空也。
术【〇】交无序七零零也。
【〇，〇】乃（承元类型者甲而化甲而化甲而甲列）也。
【〇，〇】者会甲而会乙而甲衔乙衔空也。
术【〇，〇】交无序七零零也。
【〇，〇，〇】乃（承元类型者甲而化甲而化甲而化甲而甲列）也。
【〇，〇，〇】者会甲而会乙而会丙而甲衔乙衔丙衔空也。
术【〇，〇，〇】交无序七零零也。
【〇，〇，〇，〇】乃（承元类型者甲而化甲而化甲而化甲而化甲而甲列）也。
【〇，〇，〇，〇】者会甲而会乙而会丙而会丁而甲衔乙衔丙衔丁衔空也。
术【〇，〇，〇，〇】交无序七零零也。
【〇，〇，〇，〇，〇】乃（承元类型者甲而化甲而化甲而化甲而化甲而化甲而甲列）也。
【〇，〇，〇，〇，〇】者会甲而会乙而会丙而会丁而会戊而甲衔乙衔丙衔丁衔戊衔空也。
术【〇，〇，〇，〇，〇】交无序七零零也。
「：
【〇，〇，〇，〇，〇，〇】乃（承元类型者甲而化甲而化甲而化甲而化甲而化甲而化甲而甲列）也。
【〇，〇，〇，〇，〇，〇】者会甲而会乙而会丙而会丁而会戊而会己而甲衔乙衔丙衔丁衔戊衔己衔空也。
术【〇，〇，〇，〇，〇，〇】交无序七零零也。
【〇，〇，〇，〇，〇，〇，〇】乃（承元类型者甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而甲列）也。
【〇，〇，〇，〇，〇，〇，〇】者会甲而会乙而会丙而会丁而会戊而会己而会庚而甲衔乙衔丙衔丁衔戊衔己衔庚衔空也。
术【〇，〇，〇，〇，〇，〇，〇】交无序七零零也。
【〇，〇，〇，〇，〇，〇，〇，〇】乃（承元类型者甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而甲列）也。
【〇，〇，〇，〇，〇，〇，〇，〇】者会甲而会乙而会丙而会丁而会戊而会己而会庚而会辛而甲衔乙衔丙衔丁衔戊衔己衔庚衔辛衔空也。
术【〇，〇，〇，〇，〇，〇，〇，〇】交无序七零零也。
【〇，〇，〇，〇，〇，〇，〇，〇，〇】乃（承元类型者甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而甲列）也。
【〇，〇，〇，〇，〇，〇，〇，〇，〇】者会甲而会乙而会丙而会丁而会戊而会己而会庚而会辛而会壬而甲衔乙衔丙衔丁衔戊衔己衔庚衔辛衔壬衔空也。
术【〇，〇，〇，〇，〇，〇，〇，〇，〇】交无序七零零也。
【〇，〇，〇，〇，〇，〇，〇，〇，〇，〇】乃（承元类型者甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而甲列）也。
【〇，〇，〇，〇，〇，〇，〇，〇，〇，〇】者会甲而会乙而会丙而会丁而会戊而会己而会庚而会辛而会壬而会癸而甲衔乙衔丙衔丁衔戊衔己衔庚衔辛衔壬衔癸衔空也。
术【〇，〇，〇，〇，〇，〇，〇，〇，〇，〇】交无序七零零也。 ：」





「： 乘乃化整数而化整数而整数也。
乘者会甲而会乙而《《C调用》》名『yyIntMult』传甲与乙也。 ：」

注 list map。
态射乃（承元类型者甲而承元类型者乙而化「化甲而「乙」」而化甲列而列于乙）也。
态射者受甲而受乙而会
    射而（循定以会列而「鉴列而
        有空则空
        或有头衔尾则
            （（射于（头））衔「定于（尾）」 ）
            」）也。

注 list filter_map。
滤态射乃（承元类型者甲而承元类型者乙而化「化甲而或可有「乙」」而化甲列而列于乙）也。
滤态射者受甲而受乙而会
    射而（循定以会列而「鉴列而
        有空则空
        或有头衔尾则（
            鉴（射于（头））而
            有（可有素）则（素衔「定于（尾）」 ）
            或有（可无）则定于尾
        ）」）也。



注 list foldr。
从右折叠乃承甲而承乙而化「化甲而化乙而「乙」」而化乙而化甲列而乙也。
从右折叠者会
    组合而会缺省而（循定以会甲而「鉴甲而
        有空则缺省
        或有头衔尾则
            「
                「组合」于头于「定于（尾）」 
            」」）也。

注 list foldl。
从左折叠乃承甲而承乙而化「化甲而化乙而「乙」」而化乙而化甲列而乙也。
从左折叠者循定以会
    组合而会缺省而会甲而「鉴甲而
        有空则缺省
        或有头衔尾则
            「
                「定于「组合」于（「组合」于头于缺省）于尾」 
            」」也。

注：list filter。
滤乃承乙而化「化「乙」而爻」而化乙列而乙列也。
滤者受乙而会
    过滤函数而虑（
        「： ID者随机之获取随机整数于一零零零零也。 ：」。
    ）以成（
        （
        循定以会甲而鉴甲而
        有空则甲
        或有头衔尾则
            「
                若「过滤函数于（头）」
                则「头衔「定于（尾）」」
                否则「定于（尾）」
            」））之道也。

滤debug乃承乙而化「化「乙」而爻」而化乙列而乙列也。
滤debug者会
    过滤函数而会甲而虑（
        结果者滤授以乙于过滤函数于甲也。
        笔之打印行于『过滤完成，结果是』；
         笔之调试打印于（（乙）列）于甲。
    ）以成结果之道也。

注append。
附加乃承乙而化乙列而化乙列而乙列也。
附加者循定以会
    列一而会列二而「鉴「列一」而
        有空则「列二」
        或有头衔尾则
            「
                头衔（定于尾于「列二」）
            」」也。
〇@〇者「附加」也。
术〇@〇交右序六八九也。
〇接〇者「附加」也。
术〇接〇交右序六八九也。

注 list foldmap。
从左态射折叠乃承甲而承乙而承丙而化「化甲而化乙而丙合「乙」」而化乙而化甲列而丙列合乙也。
从左态射折叠者受甲而受乙而受丙而（循定以会
    组合而会缺省而会甲列而
    从左折叠授以甲授以（丙列合乙）于（会当前元素而会列及累加而
        鉴「列及累加」而
        有（「丙列」与「累加」）则（
            鉴（「组合」于当前元素于（「列及累加」中一））而
                有（新素与「新累加」）则（（「列及累加」中零）接【新素】与「新累加」）
        ）
    ）于（【】与缺省）于「甲列」）也。

注append。
结尾多乃承乙而化乙列而化乙而乙列也。
结尾多者会列一而会元素而
        「列一」@（（元素）衔【】）也。


注reverse。
反转乃承乙而化乙列而乙列也。
反转者循定以会列而（鉴列而
        有空则（列）
        或有头衔尾则
                （定于（尾））@（（头）衔【】）
）也。
注concat。「：建议改名：列联：」
串联乃承乙而化乙列列而乙列也。
串联者循定以会甲而鉴甲而
        有空则空
        或有头衔尾则头@（定于（尾））
            也。

注length。
长度乃承乙而化乙列而整数也。
长度者循定以
        会甲而「鉴甲而
        有空则零
        或有头衔尾则
                （一+（定于（尾）））
        」也。

注takeN。
取乃承乙而化整数而化乙列而乙列也。
取者循定以会数而会甲而
            鉴甲而
            有空则空
            或有头衔尾则
                「若 数 = 零
                    则空
                    否则
                        「
                            头衔
                            （定于（数 - （一））于（尾））
                」」也。

注dropN。
放乃承乙而化整数而化乙列而乙列也。
放者循定以
        会数而会甲而
            鉴甲而
            有空则（
                若 数 = 零
                则 （【】）
                否则 索引异常之抛出于元
            ）
            或有头衔尾则
                「若整数操作之「等零」于数则甲
                    否则
                        「
                            
                            （定于（整数操作之减于数于（一））于（尾））
                」」也。

注dropN at the end。
结尾放乃承乙而化整数而化乙列而乙列也。
结尾放者受乙而会数而会列而
        反转于（放于数于（（反转）于列））
        也。

注beginswith。
以起否乃承乙而化（化乙而化乙而（爻））而化乙列而化乙列而爻也。
以起否者循定以
        会等于测试而会前缀而会测试列而
             鉴前缀而
            有空则阳
            或有缀头衔缀尾则
                「鉴「测试列」而
                    有空则阴
                    或有测头衔测尾则
                        （（「等于测试」 于 （缀头） 于（测头））
                        且（定于「等于测试」 于 （缀尾） 于 （测尾）））
                」也。
注endswith。
以终否乃承乙而化（化乙而化乙而（爻））而化乙列而化乙列而爻也。
以终否者循定以
        会等于测试而会后缀而会测试列而
            「以起否」于「等于测试」于（（反转）于后缀）于（反转于「测试列」）也。


注exists。
存在吗乃承乙而化（化乙而（爻））而化乙列而爻也。
存在吗者会函而会列而非于（（零） = （长度于（（滤于函于（列）））））也。    
        
注tabulate。
打表乃承乙而化整数而化（化整数而（乙））而乙列也。
打表者循定以会数而会函而
虑（
    原数者数也。
    递归乃承乙而化整数而乙列也。
    递归者循定以会当前数而
        若当前数 = 原数则
            空
            否则（函于（当前数））衔（定于（当前数 + （一）））也。
）以成递归授以乙于零之道也。


第N个乃承乙而化整数而化乙列而乙也。
第N个者循定以会数而会列而
    鉴列而
        有空则
        （索引异常之抛出授以乙于元
            注（错误之错误 授以（乙））于『错误：第N个的N超出了范围』）
        或有头衔尾则（
            若零 = 数则头
                否则定于（数 - （一））于尾
        ）也。

移除重复乃承乙而化（化乙而化乙而爻）而化乙列而乙列也。
移除重复者循移除重复以会等而会入而
    鉴入而
        有【】则【】
        或有头衔尾则头衔（移除重复于「等」于（滤于（会甲而「等」于甲于头）于尾））也。

「：zip，长度必须一样：」
拉链合并乃承甲而承乙而化甲列而化乙列而（甲合乙）列也。
拉链合并者循拉链合并以会甲列而会乙列而
    鉴「甲列」与「乙列」而
    有【】与【】则【】
    或有（甲首衔甲尾）与（乙首衔乙尾）则（甲首与乙首）衔（「拉链合并」于甲尾于乙尾）
    或有「其他」则发生事故于『拉链合并于不同长度的两个列』也。