

寻观爻术之书。

寻观标准库之语言核心之内建类型之书。

寻观整数操作之书。
「： 寻标准库之语言核心之错误之书。 ：」
寻观标准库之语言核心之异常之书。
「： 寻随机之书。 ：」
寻标准库之输入输出之笔之书。
寻观可选值之书。
寻观标准库之语言核心之续延之书。

笔者笔也。

「： 「索引异常」者异常之新建异常于有于『索引异常』也。 ：」

列立化元类型而元类型也。
「： 「〇列」号化元类型而元类型也。 ：」
「〇列」即列也。
术〇列交左序七零零也。
术列交无序七零零也。
空立（承元类型者「甲」而甲列）也。
多立（承元类型者「甲」而化甲而化甲列而甲列）也。

「：
〇，〇者多也。
术〇，〇交右序七零零也。
】者空也。
术】交无序七一零也。
：」
【】即空也。
术【】交无序七一零也。
「〇衔〇」即多也。
术〇衔〇交右序七零零也。
【〇】乃（承元类型者「甲」而化甲而甲列）也。
「【〇】」者会甲而甲衔空也。
术【〇】交无序七零零也。
【〇，〇】乃（承元类型者「甲」而化甲而化甲而甲列）也。
「【〇，〇】」者会甲而会乙而甲衔乙衔空也。
术【〇，〇】交无序七零零也。
【〇，〇，〇】乃（承元类型者「甲」而化甲而化甲而化甲而甲列）也。
「【〇，〇，〇】」者会甲而会乙而会丙而甲衔乙衔丙衔空也。
术【〇，〇，〇】交无序七零零也。
【〇，〇，〇，〇】乃（承元类型者「甲」而化甲而化甲而化甲而化甲而甲列）也。
「【〇，〇，〇，〇】」者会甲而会乙而会丙而会丁而甲衔乙衔丙衔丁衔空也。
术【〇，〇，〇，〇】交无序七零零也。
【〇，〇，〇，〇，〇】乃（承元类型者「甲」而化甲而化甲而化甲而化甲而化甲而甲列）也。
「【〇，〇，〇，〇，〇】」者会甲而会乙而会丙而会丁而会戊而甲衔乙衔丙衔丁衔戊衔空也。
术【〇，〇，〇，〇，〇】交无序七零零也。
「：
【〇，〇，〇，〇，〇，〇】乃（承元类型者「甲」而化甲而化甲而化甲而化甲而化甲而化甲而甲列）也。
【〇，〇，〇，〇，〇，〇】者会甲而会乙而会丙而会丁而会戊而会己而甲衔乙衔丙衔丁衔戊衔己衔空也。
术【〇，〇，〇，〇，〇，〇】交无序七零零也。
【〇，〇，〇，〇，〇，〇，〇】乃（承元类型者「甲」而化甲而化甲而化甲而化甲而化甲而化甲而化甲而甲列）也。
【〇，〇，〇，〇，〇，〇，〇】者会甲而会乙而会丙而会丁而会戊而会己而会庚而甲衔乙衔丙衔丁衔戊衔己衔庚衔空也。
术【〇，〇，〇，〇，〇，〇，〇】交无序七零零也。
【〇，〇，〇，〇，〇，〇，〇，〇】乃（承元类型者「甲」而化甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而甲列）也。
【〇，〇，〇，〇，〇，〇，〇，〇】者会甲而会乙而会丙而会丁而会戊而会己而会庚而会辛而甲衔乙衔丙衔丁衔戊衔己衔庚衔辛衔空也。
术【〇，〇，〇，〇，〇，〇，〇，〇】交无序七零零也。
【〇，〇，〇，〇，〇，〇，〇，〇，〇】乃（承元类型者「甲」而化甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而甲列）也。
【〇，〇，〇，〇，〇，〇，〇，〇，〇】者会甲而会乙而会丙而会丁而会戊而会己而会庚而会辛而会壬而甲衔乙衔丙衔丁衔戊衔己衔庚衔辛衔壬衔空也。
术【〇，〇，〇，〇，〇，〇，〇，〇，〇】交无序七零零也。
【〇，〇，〇，〇，〇，〇，〇，〇，〇，〇】乃（承元类型者「甲」而化甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而甲列）也。
【〇，〇，〇，〇，〇，〇，〇，〇，〇，〇】者会甲而会乙而会丙而会丁而会戊而会己而会庚而会辛而会壬而会癸而甲衔乙衔丙衔丁衔戊衔己衔庚衔辛衔壬衔癸衔空也。
术【〇，〇，〇，〇，〇，〇，〇，〇，〇，〇】交无序七零零也。 ：」





「： 乘乃化整数而化整数而整数也。
乘者会甲而会乙而《《C调用》》名『yyIntMult』传甲与乙也。 ：」

「： 注 list map。 ：」
态射乃（承元类型者「甲」而承乙而化「化甲而「乙」」而化甲列而列于乙）也。
态射者循态射以
    会射而（会列而「鉴列而
        有空则空
        或有头衔尾则
            （（射于（头））衔「态射于射于（尾）」 ）
            」）也。

「：打表态射，与态射类似，不过列表在第一个参数：」
打表态射乃（承元类型者「甲」而承乙而化甲列而化「化甲而「乙」」而列于乙）也。
打表态射者会列而会射而态射于射于列也。



「： 注 list foldr。 ：」
从右折叠乃承甲而承乙而化「化甲而化乙而「乙」」而化乙而化甲列而乙也。
从右折叠者循从右折叠以会
    组合而会缺省而（会甲而「鉴甲而
        有空则缺省
        或有头衔尾则
            「
                「组合」于头于「从右折叠于「组合」于缺省于（尾）」 
            」」）也。

「： 注 list foldl。 ：」
从左折叠乃承甲而承乙而化「化甲而化乙而「乙」」而化乙而化甲列而乙也。
从左折叠者循从左折叠以会
    组合而会缺省而会甲而「鉴甲而
        有空则缺省
        或有头衔尾则
            「
                「从左折叠于「组合」于（「组合」于头于缺省）于尾」 
            」」也。

「： 注：list filter。 ：」
滤乃承乙而化「化「乙」而爻」而化乙列而乙列也。
滤者循滤以会
    过滤函数而（
        会甲而鉴甲而
        有空则甲
        或有头衔尾则
            「
                若「过滤函数于（头）」
                则「头衔「滤于过滤函数于（尾）」」
                否则「滤于过滤函数于（尾）」
            」）也。

滤debug乃承乙而化「化「乙」而爻」而化乙列而乙列也。
滤debug者受乙而会
    过滤函数而会甲而虑（
        结果者滤授以乙于过滤函数于甲也。
        笔之打印行于『过滤完成，结果是』；
         笔之调试打印于（（乙）列）于甲。
        结果
    ）也。

「： 注append。 ：」
附加乃承乙而化乙列而化乙列而乙列也。
附加者循附加以会
    列一而会列二而「鉴「列一」而
        有空则「列二」
        或有头衔尾则
            「
                头衔（「附加」于尾于「列二」）
            」」也。
「〇@〇」者「附加」也。
术〇@〇交右序六八九也。
「〇接〇」者「附加」也。
术〇接〇交右序六八九也。

「： 注 list foldmap。 ：」
从左态射折叠乃承甲而承乙而承丙而化「化甲而化乙而丙合「乙」」而化乙而化甲列而丙列合乙也。
从左态射折叠者受甲而受乙而受丙而（会
    组合而会缺省而会甲列而
    从左折叠授以甲授以（丙列合乙）于（会当前元素而会列及累加而
        鉴「列及累加」而
        有（「丙列」与「累加」）则（
            鉴（「组合」于当前元素于（「列及累加」中一））而
                有（新素与「新累加」）则（（「列及累加」中零）接【新素】与「新累加」）
        ）
    ）于（【】与缺省）于「甲列」）也。

「： 注append。 ：」
结尾多乃承乙而化乙列而化乙而乙列也。
结尾多者会列一而会元素而
        「列一」@（（元素）衔【】）也。


「： 注reverse。 ：」
反转乃承乙而化乙列而乙列也。
反转者循反转以会列而（鉴列而
        有空则（列）
        或有头衔尾则
                （反转于（尾））接（（头）衔【】）
）也。
「： 注concat。建议改名：列联 ：」
串联乃承乙而化乙列列而乙列也。
串联者循串联以会甲而鉴甲而
        有空则空
        或有头衔尾则头接（串联于（尾））
            也。

「： 注length。 ：」
长度乃承乙而化乙列而整数也。
长度者循长度以
        会甲而「鉴甲而
        有空则零
        或有头衔尾则
                （一加（长度于（尾）））
        」也。

「： 注takeN。 ：」
取乃承乙而化整数而化乙列而乙列也。
取者循取以会数而会甲而
            鉴甲而
            有空则空
            或有头衔尾则
                「若 数 = 零
                    则空
                    否则
                        「
                            头衔
                            （取于（数 - （一））于（尾））
                」」也。

「： 注dropN。 ：」
放乃承乙而化整数而化乙列而乙列也。
放者循放以
        会数而会甲而
            鉴甲而
            有空则（
                若 数 = 零
                则 （【】）
                「： 否则 索引异常之抛出于元 ：」
                否则 发生事故于『索引异常』
            ）
            或有头衔尾则
                「若「整数操作」之「等零」于数则甲
                    否则
                        「
                            
                            （放于（数减（一））于（尾））
                」」也。

「： 注dropN at the end。 ：」
结尾放乃承乙而化整数而化乙列而乙列也。
结尾放者受乙而会数而会列而
        反转于（放于数于（（反转）于列））
        也。

「： 注beginswith。 ：」
以起否乃承乙而化（化乙而化乙而（爻））而化乙列而化乙列而爻也。
以起否者循「以起否」以
        会等于测试而会前缀而会测试列而
             鉴前缀而
            有空则阳
            或有「缀头」衔「缀尾」则
                「鉴「测试列」而
                    有空则阴
                    或有「测头」衔「测尾」则
                        （（「等于测试」 于 （缀头） 于（测头））
                        且（「以起否」于「等于测试」 于 （缀尾） 于 （测尾）））
                」也。
「： 注endswith。 ：」
以终否乃承乙而化（化乙而化乙而（爻））而化乙列而化乙列而爻也。
以终否者会等于测试而会后缀而会测试列而
            「以起否」于「等于测试」于（（反转）于后缀）于（反转于「测试列」）也。


「： 注exists。 ：」
存在吗乃承乙而化（化乙而（爻））而化乙列而爻也。
存在吗者会函而会列而非于（（零） = （长度于（（滤于函于（列）））））也。    

「： 注all。 ：」
全部符合乃承乙而化（化乙而（爻））而化乙列而爻也。
全部符合者会函而会列而（（长度于列） = （长度于（（滤于函于（列）））））也。    
        
「： 注tabulate。 ：」
打表乃承乙而化整数而化（化整数而（乙））而乙列也。
打表者受乙而会数而会函而
虑（
    「原数」者数也。
    递归乃化整数而乙列也。
    递归者循递归以会当前数而
        若当前数 = 原数则
            （空）
            否则（函于（当前数））衔（递归于（当前数 + （一）））也。
    递归于零
）也。

「： 调查（bs）：空的参数会错误地被合成

打表乃承乙而化整数而化（化整数而（乙））而乙列也。
打表者受乙而会数而会函而
虑（
    「原数」者数也。
    递归乃承乙而化整数而乙列也。
    递归者循递归以会当前数而
        若当前数 = 原数则
            空
            否则（函于（当前数））衔（递归于（当前数 + （一）））也。
    递归授以乙于零
）也。 ：」


第N个乃承乙而化整数而化乙列而乙也。
第N个者循第N个以（会数而会列而
    鉴列而
        有空则
        （
            发生事故于『索引异常』
            「： 索引异常之抛出于元 ：」
            「： 注（错误之错误 授以（乙））于『错误：第N个的N超出了范围』 ：」
            ）
        或有头衔尾则（
            若零 = 数则头
                否则第N个于（数 - （一））于尾
    ））也。

头一个乃承乙而化乙列而乙也。
头一个者受乙而会列而
    鉴列而
        有空则
        （发生事故于『索引异常』
            「： 索引异常之抛出授以乙于元 ：」
            「： 注（错误之错误 授以（乙））于『错误：第N个的N超出了范围』 ：」
            ）
        或有头衔尾则（
            头
        ）也。

最后一个乃承乙而化乙列而乙也。
最后一个者会列而
     头一个于（反转于「列」）也。

更新第N个乃承乙而化整数而化（化乙而乙）而化乙列而乙列也。
更新第N个者会序数而会射而会列而
    （取于序数于「列」）接（【射于（第N个于序数于「列」）】）接（放于（序数加一）于「列」）也。

移除重复乃承乙而化（化乙而化乙而爻）而化乙列而乙列也。
移除重复者循移除重复以会等而会入而
    鉴入而
        有【】则【】
        或有头衔尾则头衔（移除重复于「等」于（滤于（会甲而非于（「等」于甲于头））于尾））也。
        
出现重复乃承乙而化（化乙而化乙而爻）而化乙列而爻也。
出现重复者循出现重复以会等而会入而
    （长度于入）不等于（长度于（移除重复于「等」于入））也。

「：zip，长度必须一样：」
拉链合并乃承甲而承乙而化甲列而化乙列而（甲合乙）列也。
拉链合并者循拉链合并以会甲列而会乙列而
    鉴「甲列」与「乙列」而
    有【】与【】则【】
    或有（「甲首」衔「甲尾」）与（「乙首」衔「乙尾」）则（甲首与乙首）衔（「拉链合并」于甲尾于乙尾）
    或有「其他」则发生事故于『拉链合并于不同长度的两个列』也。
    

态射二乃（承甲而承乙而承丙而化「化甲而化丙而「乙」」而化甲列而化丙列而乙列）也。
态射二者受甲而受乙而（循态射二以会
    射而（会列甲而会列丙而「鉴「列甲」与「列丙」而
        有空与空则空
        或有「甲头」衔「甲尾」与「乙头」衔「乙尾」则
            （（射于「甲头」于「乙头」）衔（态射二于射于「甲尾」于「乙尾」） ）
        或有「其他」则发生事故于『态射二中的长度不一致！！』
            」））也。

「： 注all。 ：」
全部符合二乃（承甲而承乙而化「化甲而化乙而「爻」」而化甲列而化乙列而爻）也。
全部符合二者循全部符合二以会判断而会列甲而会列乙而
    鉴「列甲」与「列乙」而
        有空与空则阳
        或有「甲头」衔「甲尾」与「乙头」衔「乙尾」则
            （若（判断于甲头于乙头）
            则（「全部符合二」于判断于甲尾于乙尾）
            否则阴 ）
        或有「其他」则发生事故于『态射二中的长度不一致！！』也。


列相等乃承甲而化（化甲而化甲而爻）而化甲列而化甲列而爻也。
列相等者会比较而会列甲而会列乙而
    若（（长度于「列甲」）不等于（长度于「列乙」））
    则（阴）
    否则（「全部符合二」于比较于「列甲」于「列乙」）也。



整数范围乃化整数而化整数而整数列也。
整数范围者循整数范围以会始而会止而
    若「或者」于（始大于止）于（始等于止）
    则【】
    否则始衔（整数范围于（始加一）于止）也。

「：list map_i：」
「态射序号」乃（承甲而承乙而化「化整数而化甲而「乙」」而化甲列而乙列）也。
「态射序号」者受甲而受乙而会射而会列而（态射二于（射）于（整数范围于零于（长度于「列」））于「列」）也。

滤出可有乃承甲而化（或可有甲）列而甲列也。
滤出可有者循滤出可有以会列而鉴列而
    有【】则【】
    或有（可有素）衔尾则（素）衔（「滤出可有」于尾）
    或有「可无」衔尾则（「滤出可有」于尾）也。


「： 注 list filter_map。 ：」
滤态射乃（承甲而承乙而化「化甲而或可有「乙」」而化甲列而乙列）也。
滤态射者会射而会列而「滤出可有」于（态射于射于「列」）也。

滤态射二乃（承甲而承乙而承丙而化「化甲而化丙而或可有「乙」」而化甲列而化丙列而乙列）也。
滤态射二者会射而会列甲而会列丙而「滤出可有」于（态射二于射于「列甲」于「列丙」）也。


「：list filter_map i：」
「滤态射序号」乃承甲而承乙而化（化整数而化甲而或可有「乙」）而化甲列而乙列也。
「滤态射序号」者会射而会列而「滤出可有」于（态射序号于射于「列」）也。


「：List subset：」
是子集乃承甲而化（化甲而化甲而爻）而化甲列而化甲列而爻也。
是子集者会等而会子而会父而
    以当前续延调用于（会延而
        （（态射于（会子元素而
            若（非于（存在吗于（会父元素而「等」于父元素于子元素）于父））
            则延于阴否则阳
        ）于子）；阳）
    ）也。

「：List equal modulo reordering：」
互为子集乃承甲而化（化甲而化甲而爻）而化甲列而化甲列而爻也。
互为子集者会等而会子而会父而
    （（是子集于「等」于「子」于「父」）且（是子集于「等」于「父」于「子」））也。



数出现次数乃承甲而化（化甲而爻）而化甲列而整数也。
数出现次数者会谓词而会甲而长度于（滤于谓词于甲）也。



「：用元素分隔，返回的列是原列的子列，且子列之间会间隔一个分隔符
    例：元素分隔于1于【2，3，1，2】=【【2，3】，【2】】
    例：元素分隔于1于【1，2，3，1，2，1】=【【】，【2，3】，【2】，【】】
    例：元素分隔于1于【1】=【【】，【】】
：」
元素分隔乃承甲而化（化甲而爻）而化甲列而甲列列也。
元素分隔者受甲而会谓词而会列而
    鉴列而
        有【】则【】
        或有（头衔尾）则
        （虑「
            处理余下乃化甲列而化甲列而化甲列列而甲列列也。
            处理余下者循处理余下以会剩余而会当前未完成而会已有而
                鉴剩余而有
                    【】则（已有接【当前未完成】）
                    或有（「剩头」衔「剩尾」）则（
                        若谓词于剩头
                        则（处理余下于剩尾于【】于（已有接【当前未完成】））
                        否则（处理余下于剩尾于（当前未完成接【剩头】）于（已有））
                    ）也。
                    （
            若谓词于头
            则（处理余下于尾于【】于【【】】）
            否则（处理余下于尾于【头】于【】）
        ）
        」
        ）
        也。
    


「：列减 A B = A \ B = {x ∈ A | x ∉ B}：」
列减乃承甲而化（化甲而化甲而爻）「：相等比较：」而化甲列而化甲列而甲列也。
列减者会相等而会被减而会乙列而
    滤于（会甲项而非于（存在吗于（会乙项而（「相等」于乙项于甲项））于「乙列」））于「被减」也。

查找元素序数乃承甲而化（化甲而化甲而爻）「：相等比较：」而化甲而化甲列而或可有整数也。
查找元素序数者循查找元素序数以会相等而会搜索值而会待搜索而
    鉴待搜索而
        有【】则（可无）
        或有（头衔尾）则
            （若「相等」于头于搜索值
            则（可有零）
            否则（鉴（查找元素序数于「相等」于搜索值于尾）而
                    有（可无）则（可无）
                    或有（可有「序数」）则（可有（序数加一））
            ））
            也。

查找元素序数条件乃承甲而化（化甲而爻）「：相等比较：」而化甲列而或可有整数也。
查找元素序数条件者循查找元素序数条件以会条件而会待搜索而
    鉴待搜索而
        有【】则（可无）
        或有（头衔尾）则
            （若「条件」于头
            则（可有零）
            否则（鉴（查找元素序数条件于「条件」于尾）而
                    有（可无）则（可无）
                    或有（可有「序数」）则（可有（序数加一））
            ））
            也。

找到元素序数乃承甲而化（化甲而化甲而爻）「：相等比较：」而化甲而化甲列而整数也。
找到元素序数者会相等而会搜索值而会待搜索而
    鉴查找元素序数于「相等」于搜索值于待搜索而
        有（可有「序数」）则序数
        或有（可无）则发生事故于『未找到元素序数』
            也。

「列查找替换」乃承甲而化（化甲而化甲而爻）「：相等比较：」
                而化甲列「：原先列：」
                而化甲列「：待查找列：」
                而化甲列「：替换后列：」
                而甲列也。
「列查找替换」者循「列查找替换」以会等而会原先而会查找值而会替换后而
    鉴原先而
        有【】则【】
        或有（头衔尾）则
            （若「以起否」于「等」于查找值于原先
            则（替换后接（「列查找替换」于「等」于（放于（长度于查找值）于原先）于查找值于替换后））
            否则（头衔（「列查找替换」于「等」于尾于查找值于替换后））
            ）也。


「：TODO：」
条件分类乃承甲而化甲列而化（化甲而爻）而甲列合甲列也。
条件分类者循条件分类以会待分类而会条件而
    鉴待分类而
        有【】则【】与【】
        或有（头衔尾）则
            （若条件于头
                则（
                    虑递归结果者（条件分类于尾于条件）而
                    （头衔（递归结果中零））与（递归结果中一）
                ）
                否则（
                    虑递归结果者（条件分类于尾于条件）而
                    （头衔（递归结果中零））与（递归结果中一）
                ）
            ）也。